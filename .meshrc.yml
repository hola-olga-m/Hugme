sources:
  - name: PostGraphileAPI
    handler:
      graphql:
        endpoint: http://localhost:3003/postgraphile/graphql
        batch: true
        operationHeaders:
          Authorization: "{context.headers.authorization}"
        schemaHeaders:
          Authorization: "{context.headers.authorization}"

transforms:
  - namingConvention:
      typeNames: pascalCase
      fieldNames: camelCase
      enumValues: upperCase
  
  - prefix:
      includeRootOperations: false
      value: HMN
      ignore:
        - User
        - Mood
        - Hug
        - HugRequest
        - Friendship
    
  - filterSchema:
      filters:
        - Query.!(_*|metadata|schema|clientInfo)
        - Mutation.!(_*|metadata|deleteNode|registerUser)

  - rename:
      renames:
        - from: 
            type: Mood
            field: score
          to: intensity
        - from:
            type: Mood
            field: isPublic
          to: public
        - from:
            type: Hug
            field: isRead
          to: read

additionalResolvers:
  - ./mesh-resolvers.js

middleware:
  - shield:
      resolvers: ./shield-rules.js
      rules:
        Query: 
          "*": true
          userMoods: "isAuthenticated"
          receivedHugs: "isAuthenticated"
          sentHugs: "isAuthenticated"
          pendingHugRequests: "isAuthenticated"
        Mutation:
          "*": "isAuthenticated"

plugins:
  - liveQuery:
      pollingInterval: 3000
      invalidateClosedConnections: true
      enableLiveBackwardCompatibility: true
      localStorage:
        enabled: true

additionalTypeDefs: |
  type ClientInfo {
    version: String!
    platform: String!
    buildDate: String!
    deviceInfo: String
    features: [String!]
  }

  extend type Query {
    # Client information
    clientInfo: ClientInfo!
  
    # Virtual fields that map to transformed queries
    publicMoods(limit: Int, offset: Int): [Mood!]!
    userMoods(userId: ID, limit: Int, offset: Int): [Mood!]!
    moodStreak(userId: ID!): MoodStreak!
    communityHugRequests(limit: Int, offset: Int): [HugRequest!]!
    receivedHugs(userId: ID!, limit: Int, offset: Int): [Hug!]!
    sentHugs(userId: ID!, limit: Int, offset: Int): [Hug!]!
    pendingHugRequests(userId: ID!): [HugRequest!]!
    
    # Legacy field kept for backward compatibility
    friendsMoods(limit: Int, offset: Int): [Mood!]!
  }

  extend type Mutation {
    # Virtual mutations that map to the actual PostGraphile mutations
    sendHug(input: HugInput!): Hug
    createMoodEntry(moodInput: MoodInput!): Mood
    # createHugRequest - commented out as it exists in the base schema
    # createHugRequest(hugRequestInput: HugRequestInput!): HugRequest
    respondToHugRequest(requestId: ID!, accept: Boolean!): HugRequest
  }

  input HugInput {
    senderId: ID!
    recipientId: ID!
    message: String
  }

  input MoodInput {
    userId: ID!
    intensity: Int!
    note: String
    private: Boolean
  }

  input HugRequestInput {
    requesterId: ID!
    message: String
  }

  type MoodStreak {
    currentStreak: Int!
    longestStreak: Int!
    lastMoodDate: String
  }

  extend type Hug {
    fromUser: User
    toUser: User
  }

  extend type HugRequest {
    requester: User
  }

sdl:
  generate: true
  filepath: ./schema.graphql

# Generate TypeScript SDK
sdk:
  generate: true
  path: ./hugmenow/web/src/mesh-sdk
  operations:
    - ./hugmenow/web/src/graphql/operations.graphql

serve:
  browser: false
  playground: true
  cors:
    origin: "*"
    credentials: true
  port: 4000