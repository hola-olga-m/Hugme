sources:
  - name: PostGraphileAPI
    handler:
      graphql:
        endpoint: http://localhost:3003/postgraphile/graphql
        batch: true
        batchingOptions:
          maxBatchSize: 10
          delay: 50
        retry: 3
        timeout: 10000
        operationHeaders:
          Authorization: "{context.headers.authorization}"
          'x-client-version': "{context.headers['x-client-version'] || '1.0.0'}"
          'x-client-platform': "{context.headers['x-client-platform'] || 'web'}"
        schemaHeaders:
          Authorization: "{context.headers.authorization}"
          'x-request-type': 'schema'

transforms:
  - namingConvention:
      typeNames: pascalCase
      fieldNames: camelCase
      enumValues: upperCase
  
  - prefix:
      includeRootOperations: false
      value: HMN
      ignore:
        - User
        - Mood
        - Hug
        - HugRequest
        - Friendship
    
  - filterSchema:
      filters:
        - Query.!(_*|metadata|schema|clientInfo)
        - Mutation.!(_*|metadata|deleteNode|registerUser)

  - rename:
      renames:
        - from: 
            type: Mood
            field: score
          to: intensity
        - from:
            type: Mood
            field: isPublic
          to: public
        - from:
            type: Hug
            field: isRead
          to: read

additionalResolvers:
  - ./mesh-resolvers.js

middleware:
  - shield:
      resolvers: ./shield-rules.js
      fallbackRule: "allow"
      allowExternalErrors: true
      debug: true
      rules:
        Query: 
          "*": true
          userMoods: "isAuthenticated"
          receivedHugs: "isAuthenticated"
          sentHugs: "isAuthenticated"
          pendingHugRequests: "isAuthenticated"
          moodStreak: "isAuthenticated"
          clientInfo: true
        Mutation:
          "*": "isAuthenticated"
          createMoodEntry: "isAuthenticated"
          sendHug: "isAuthenticated"
          respondToHugRequest: "isAuthenticated"

cache:
  enabled: true
  ttl: 60 # 1 minute default TTL
  embedded: true
  # Different TTL values for different operations
  operations:
    - field: 'Query.publicMoods'
      ttl: 120 # 2 minutes for public data
    - field: 'Query.userMoods'
      ttl: 60  # 1 minute for user-specific data
    - field: 'Query.moodStreak'
      ttl: 300 # 5 minutes for rarely changing data
  # Skip cache for these operations
  excludedOperations:
    - 'Mutation.*'

plugins:
  - liveQuery:
      pollingInterval: 3000
      invalidateClosedConnections: true
      enableLiveBackwardCompatibility: true
      localStorage:
        enabled: true
        path: ./.mesh-cache
      # Automatically mark these fields as live queries
      includeTypes:
        - 'Query.publicMoods'
        - 'Query.userMoods'
        - 'Query.receivedHugs'
        - 'Query.pendingHugRequests'

additionalTypeDefs: |
  type ClientInfo {
    version: String!
    platform: String!
    buildDate: String!
    deviceInfo: String
    features: [String!]
  }

  extend type Query {
    # Client information
    clientInfo: ClientInfo!
  
    # Virtual fields that map to transformed queries
    publicMoods(limit: Int, offset: Int): [Mood!]!
    userMoods(userId: ID, limit: Int, offset: Int): [Mood!]!
    moodStreak(userId: ID!): MoodStreak!
    communityHugRequests(limit: Int, offset: Int): [HugRequest!]!
    receivedHugs(userId: ID!, limit: Int, offset: Int): [Hug!]!
    sentHugs(userId: ID!, limit: Int, offset: Int): [Hug!]!
    pendingHugRequests(userId: ID!): [HugRequest!]!
    
    # Legacy field kept for backward compatibility
    friendsMoods(limit: Int, offset: Int): [Mood!]!
  }

  extend type Mutation {
    # Virtual mutations that map to the actual PostGraphile mutations
    sendHug(input: HugInput!): Hug
    createMoodEntry(moodInput: MoodInput!): Mood
    # createHugRequest - commented out as it exists in the base schema
    # createHugRequest(hugRequestInput: HugRequestInput!): HugRequest
    respondToHugRequest(requestId: ID!, accept: Boolean!): HugRequest
  }

  input HugInput {
    senderId: ID!
    recipientId: ID!
    message: String
  }

  input MoodInput {
    userId: ID!
    intensity: Int!
    note: String
    private: Boolean
  }

  input HugRequestInput {
    requesterId: ID!
    message: String
  }

  type MoodStreak {
    currentStreak: Int!
    longestStreak: Int!
    lastMoodDate: String
  }

  extend type Hug {
    fromUser: User
    toUser: User
  }

  extend type HugRequest {
    requester: User
  }

sdl:
  generate: true
  filepath: ./schema.graphql

# Generate TypeScript SDK
sdk:
  generate: true
  path: ./hugmenow/web/src/mesh-sdk
  operations:
    - ./hugmenow/web/src/graphql/operations.graphql

serve:
  browser: false
  playground: true
  playgroundTitle: "HugMeNow API Gateway"
  playgroundTabs:
    - name: "Get Public Moods"
      query: |
        query GetPublicMoods {
          publicMoods(limit: 5) {
            id
            intensity
            note
            createdAt
            user {
              id
              name
              username
            }
          }
        }
    - name: "User Authentication"
      query: |
        mutation Login($email: String!, $password: String!) {
          login(loginInput: { email: $email, password: $password }) {
            user {
              id
              name
              username
            }
            accessToken
          }
        }
      variables: |
        {
          "email": "demo@example.com",
          "password": "password123"
        }
  cors:
    origin: "*"
    credentials: true
    methods: ["GET", "POST", "OPTIONS"]
    allowedHeaders: ["Content-Type", "Authorization", "x-client-version", "x-client-platform"]
  port: 4000
  hostname: "0.0.0.0"
  tracing: true
  introspection: true
  errorOptions:
    maskError: process.env.NODE_ENV !== 'development'