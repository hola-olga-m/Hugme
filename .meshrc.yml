# Enhanced GraphQL Mesh Configuration for HugMeNow
# This configuration integrates with GraphQL Mesh and supports Live Queries

# API source configuration - Using GraphQL handler with more defensive settings
sources:
  - name: PostGraphileAPI
    handler: graphql
    # Use environment variable for endpoint
    endpoint: http://localhost:3003/postgraphile/graphql
    operationHeaders:
      Authorization: '{context.headers.authorization}'
    # Better schema handling to avoid GraphQL version conflicts
    schemaHeaders:
      Accept: application/json
    # Introspection options
    introspection:
      handleFieldConflicts: true
    # Batch execution for better performance
    batch: true
    # Timeout settings
    timeout: 30000
    
# SDK Generation options
generate:
  sdk:
    # SDK generation options
    config:
      # Use simple scalar types
      scalars:
        DateTime: string
        JSON: object
      # Naming conventions
      namespacedImportName: gqlTypes
      dedupeFragments: true
      exportFragmentSpreadSubTypes: true
      skipTypename: true
      documentMode: string
      # Custom fragments
      fragmentMasking:
        unmaskFunctionName: getFragmentData
        implements: { mappers: true }
  # Define the operations we want to include in the SDK
  operationsPaths:
    - type: Query
      path: me
      name: Me
    - type: Query
      path: publicMoods
      name: PublicMoods
      arguments:
        limit: Int = 10
        offset: Int = 0
    - type: Query
      path: userMoods
      name: UserMoods
      arguments:
        userId: ID!
        limit: Int
        offset: Int
    - type: Query
      path: receivedHugs
      name: ReceivedHugs
      arguments:
        userId: ID!
        limit: Int
        offset: Int
    - type: Query
      path: sentHugs
      name: SentHugs
      arguments:
        userId: ID!
        limit: Int
        offset: Int
    - type: Query
      path: friendsMoods
      name: FriendsMoods
      arguments:
        userId: ID!
        limit: Int = 10
        offset: Int = 0
    - type: Query
      path: moodStreak
      name: MoodStreak
      arguments:
        userId: ID!
    - type: Mutation
      path: createMoodEntry
      name: CreateMoodEntry
      arguments:
        moodInput: MoodEntryInput!
    - type: Mutation
      path: sendHug
      name: SendHug
      arguments:
        hugInput: SendHugInput!
  # Specify SDK output paths
  targets:
    - name: ESM
      type: sdk
      format: esm
      output: ./mesh-sdk/index.js
    - name: CJS
      type: sdk
      format: cjs
      output: ./mesh-sdk/index.cjs
    - name: TS
      type: sdk
      format: typescript
      output: ./mesh-sdk/index.d.ts
    - name: Schema
      type: schema
      output: ./mesh-sdk/schema.graphql

# Schema transformations - enhanced with additional plugins
transforms:
  # Apply consistent naming conventions for better client integration
  - transform: namingConvention
    typeNames: pascalCase
    fieldNames: camelCase
    enumValues: upperCase
  
  # Map client-side field names to server-side - improved field mapping
  - transform: rename
    renames:
      # Query field mappings
      - from:
          type: Query
          field: friendsMoods
        to:
          type: Query
          field: allMoods
      - from:
          type: Query
          field: userMoods
        to:
          type: Query
          field: allMoods
      - from:
          type: Query
          field: sentHugs
        to:
          type: Query
          field: allHugs
      - from:
          type: Query
          field: receivedHugs
        to:
          type: Query
          field: allHugs
      
      # Type field mappings
      - from:
          type: Mood
          field: score
        to:
          type: Mood
          field: intensity
      - from:
          type: Hug
          field: fromUser
        to:
          type: Hug
          field: sender
      - from:
          type: Hug
          field: toUser
        to:
          type: Hug
          field: recipient
      - from:
          type: Hug
          field: read
        to:
          type: Hug
          field: isRead
      
      # Field renaming for better client compatibility
      - from:
          type: User
          field: profileImageUrl
        to:
          type: User
          field: profileImage
          
  # Add field transformations for data formatting
  - transform: prefix
    value: ""
    includeRootOperations: false
    types:
      - User
      - Mood
      - Hug
      
  # Transform timestamps to ISO format strings
  - transform: filterSchema
    filters:
      - Mood.createdAt
      - Hug.createdAt
      - User.createdAt
        
  # Add pagination to relevant connections by removing unnecessary pagination fields
  - transform: filterSchema
    mode: bare
    filters:
      - Query.!*
      - Mutation.!*
      - "!*Connection"
      - "!*Edge"
      - "!PageInfo"
      
  # Cache control is handled in the Apollo Server configuration
  # instead of via a transform

# Additional type definitions - Enhanced for better client integration
additionalTypeDefs: |
  """
  Live query directive for real-time data updates
  """
  directive @live on QUERY
  
  """
  Client-specific fields for the Query type
  Provides virtual fields that map to the PostGraphile schema
  """
  extend type Query {
    """Client information field - provides version and feature flags"""
    clientInfo: ClientInfo!
    
    """
    Virtual field mapping to allMoods with public filter
    Retrieves moods that are publicly visible from friends
    """
    friendsMoods(
      """Maximum number of items to return"""
      limit: Int, 
      """Number of items to skip"""
      offset: Int
    ): [Mood!]
    
    """
    Virtual field mapping to allMoods with user filter
    Retrieves moods that belong to a specific user
    """
    userMoods(
      """Filter by specific user ID"""
      userId: ID, 
      """Maximum number of items to return"""
      limit: Int, 
      """Number of items to skip"""
      offset: Int
    ): [Mood!]
    
    """
    Virtual field mapping to allHugs with sender filter
    Retrieves hugs sent by a specific user
    """
    sentHugs(
      """Filter by sender user ID"""
      userId: ID!, 
      """Maximum number of items to return"""
      limit: Int, 
      """Number of items to skip"""
      offset: Int
    ): [Hug!]
    
    """
    Virtual field mapping to allHugs with recipient filter
    Retrieves hugs received by a specific user
    """
    receivedHugs(
      """Filter by recipient user ID"""
      userId: ID!, 
      """Maximum number of items to return"""
      limit: Int, 
      """Number of items to skip"""
      offset: Int
    ): [Hug!]
  }
  
  # Client-specific mutations that map to PostGraphile mutations with different parameters
  extend type Mutation {
    """
    Send a hug to a friend, mapping to createHug mutation
    """
    sendFriendHug(
      """Recipient user ID"""
      toUserId: ID!, 
      """Related mood ID"""
      moodId: ID!, 
      """Optional personal message"""
      message: String
    ): Hug
  }
  
  # Define subscription type for real-time updates
  type Subscription {
    """
    Subscribe to new mood creation events
    Real-time notifications when a user creates a mood
    """
    newMood: Mood!
    
    """
    Subscribe to new hug events
    Real-time notifications when any hug is sent
    """
    newHug: Hug!
    
    """
    Subscribe to hugs received by a specific user
    Real-time notifications when a specific user receives a hug
    """
    newHugReceived(
      """User ID to filter hugs for"""
      userId: ID!
    ): Hug!
    
    """
    Subscribe to new moods from friends
    Real-time notifications when a friend creates a mood
    """
    newFriendMood(
      """User ID whose friends to monitor"""
      userId: ID!
    ): Mood!
  }
  
  # Virtual fields for the Mood type
  extend type Mood {
    """
    Virtual field mapping to intensity
    Provides a more generalized field name
    """
    score: Int
  }
  
  # Virtual fields for the Hug type
  extend type Hug {
    """
    Virtual field mapping to sender
    Provides a more semantically clear field name
    """
    fromUser: User
    
    """
    Virtual field mapping to recipient
    Provides a more semantically clear field name
    """
    toUser: User
    
    """
    Virtual field mapping to isRead
    Provides a simpler field name
    """
    read: Boolean
  }
  
  # Client-specific types with enhanced documentation
  """
  Client information for version tracking and feature detection
  """
  type ClientInfo {
    """Client application version"""
    version: String!
    
    """Build date of the client application"""
    buildDate: String!
    
    """Platform the client is running on (web, ios, android)"""
    platform: String
    
    """Additional device information"""
    deviceInfo: String
    
    """Enabled feature flags"""
    features: [String]
  }

# Additional resolvers
additionalResolvers:
  - ./mesh-resolvers.mjs

# Cache configuration for better performance
cache:
  localforage:
    useCache: true
    ttl: 300 # 5 minutes

# Apollo-specific options
apollo:
  introspection: true
  playground: true
  debug: true
  csrfPrevention: true
  cors:
    origin: '*'
    credentials: true
  # Configure Apollo-specific subscription settings
  subscriptions:
    path: /graphql
    onConnect: true
    onDisconnect: true
    keepAlive: 10000

# Serve configuration (for standalone mode)
serve:
  endpoint: /graphql
  playground: true
  cors:
    origin: '*'
    credentials: true
  port: ${env.PORT}
  host: "0.0.0.0"
  # Enable WebSocket subscriptions in standalone mode
  subscriptions:
    enabled: true
    path: /graphql
    keepAlive: 10000

# Logging configuration
logger:
  level: info
  format: colorized
  timestamp: true

# Live Query plugin configuration
plugins:
  - liveQuery:
      invalidations:
        # Invalidate friendsMoods and userMoods queries when a new mood is created
        - field: Mutation.createMoodEntry
          invalidate:
            - Query.friendsMoods
            - Query.userMoods
            - Mood:{args.moodInput.userId}
            
        # Invalidate sentHugs and receivedHugs queries when a new hug is sent
        - field: Mutation.sendHug
          invalidate:
            - Query.sentHugs
            - Query.receivedHugs
            - Hug:{args.hugInput.senderId}
            - Hug:{args.hugInput.recipientId}
            
        # Invalidate hug request queries when a new hug request is created
        - field: Mutation.createHugRequest
          invalidate:
            - Query.myHugRequests
            - Query.pendingHugRequests
            - Query.communityHugRequests
            - HugRequest:{args.hugRequestInput.requesterId}
            - HugRequest:{args.hugRequestInput.recipientId}
            
        # Invalidate hug request queries when responding to a request
        - field: Mutation.respondToHugRequest
          invalidate:
            - Query.myHugRequests
            - Query.pendingHugRequests
            - Query.communityHugRequests
            - HugRequest:{args.requestId}
            
        # Invalidate user-specific queries
        - field: Mutation.updateUser
          invalidate:
            - User:{args.updateUserInput.id}

# Note: We need to handle GraphQL version conflicts differently