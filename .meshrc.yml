# Remove logger config for simplicity

sources:
  - name: PostGraphileAPI
    handler:
      graphql:
        endpoint: "http://localhost:3003/postgraphile/graphql"
        batch: true
        batchingOptions:
          maxBatchSize: 15
          delay: 30
        retry: 3
        retryOptions:
          retryStrategy: "incremental"
          maxRetryDelay: 2000
          initialDelay: 100
        timeout: 12000
        multipart: true
        operationHeaders:
          Authorization: "{context.headers.authorization}"
          "x-client-version": "{context.headers['x-client-version'] || '1.0.0'}"
          "x-client-platform": "{context.headers['x-client-platform'] || 'web'}"
          "x-request-id": "{context.headers['x-request-id'] || generateId()}"
          "x-mesh-source": "mesh-gateway"
        schemaHeaders:
          Authorization: "{context.headers.authorization}"
          "x-request-type": "schema"
          "x-mesh-internal": "true"

transforms:
  - namingConvention:
      typeNames: pascalCase
      fieldNames: camelCase
      enumValues: upperCase
      transformUnderscore: true
  - prefix:
      includeRootOperations: false
      value: HMN
      ignore:
        - User
        - Mood
        - Hug
        - HugRequest
        - Friendship
        - MoodStreak
        - MoodInput
        - HugInput
        - HugRequestInput
        - AuthPayload
        - LoginInput
        - RegisterInput
  - filterSchema:
      filters:
        - "Query.!(_*|metadata|schema|introspection|clientInfo|pgAdmin*|nodeId*|node*)"
        - "Mutation.!(_*|metadata|deleteNode|delete*|register*|removeAll*)"
        - "Type.!(*Connection|*Edge|*Payload|Node|PageInfo)"
        - "User.!(nodeId|firstName|lastName|__typename)"
        - "*.!(nodeId)"
  - rename:
      renames:
        - from:
            type: Mood
            field: score
          to:
            type: Mood
            field: intensity
        - from:
            type: Mood
            field: isPublic
          to:
            type: Mood
            field: public
        - from:
            type: Hug
            field: isRead
          to:
            type: Hug
            field: read
        - from:
            type: User
            field: avatarUrl
          to:
            type: User
            field: profileImage
        - from:
            type: HugRequest
            field: createdAt
          to:
            type: HugRequest
            field: requestedAt
        - from:
            type: CreateMoodPayload
          to:
            type: MoodResult
        - from:
            type: CreateHugPayload
          to:
            type: HugResult

additionalResolvers:
  - "./mesh-resolvers.js"

middleware:
  - shield:
      resolvers: "./shield-rules.js"
      fallbackRule: "allow"
      allowExternalErrors: true
      debug: true
      rules:
        Query:
          "*": true
          userMoods: "isAuthenticated"
          receivedHugs: "isAuthenticated"
          sentHugs: "isAuthenticated"
          pendingHugRequests: "isAuthenticated"
          moodStreak: "isAuthenticated"
          clientInfo: true
        Mutation:
          "*": "isAuthenticated"
          createMoodEntry: "isAuthenticated"
          sendHug: "isAuthenticated"
          respondToHugRequest: "isAuthenticated"

# Simplifying plugin configuration to essential ones only
plugins:
  # Keep only essential plugins for now
  - name: live-query
    options:
      pollingInterval: 3000
      invalidateClosedConnections: true
      enableLiveBackwardCompatibility: true
      includeTypes:
        - Query.publicMoods
        - Query.userMoods
        - Query.receivedHugs
        - Query.pendingHugRequests
        - Query.friendsMoods
        
  # JWT Authentication plugin
  - name: jwt-auth
    options:
      algorithm: HS256
      secretKey: "{env.JWT_SECRET || 'default-dev-key'}"
      headerName: "authorization"

additionalTypeDefs: |
  type ClientInfo {
    version: String!
    platform: String!
    buildDate: String!
    deviceInfo: String
    features: [String!]
  }

  extend type Query {
    clientInfo: ClientInfo!
    publicMoods(limit: Int, offset: Int): [Mood!]!
    userMoods(userId: ID, limit: Int, offset: Int): [Mood!]!
    moodStreak(userId: ID!): MoodStreak!
    communityHugRequests(limit: Int, offset: Int): [HugRequest!]!
    receivedHugs(userId: ID!, limit: Int, offset: Int): [Hug!]!
    sentHugs(userId: ID!, limit: Int, offset: Int): [Hug!]!
    pendingHugRequests(userId: ID!): [HugRequest!]!
    friendsMoods(limit: Int, offset: Int): [Mood!]!
  }

  extend type Mutation {
    sendHug(input: HugInput!): Hug
    createMoodEntry(moodInput: MoodInput!): Mood
    respondToHugRequest(requestId: ID!, accept: Boolean!): HugRequest
  }

  input HugInput {
    senderId: ID!
    recipientId: ID!
    message: String
  }

  input MoodInput {
    userId: ID!
    intensity: Int!
    note: String
    private: Boolean
  }

  input HugRequestInput {
    requesterId: ID!
    message: String
  }

  type MoodStreak {
    currentStreak: Int!
    longestStreak: Int!
    lastMoodDate: String
  }

  extend type Hug {
    fromUser: User
    toUser: User
  }

  extend type HugRequest {
    requester: User
  }

sdl:
  generate: true
  filepath: "./schema.graphql"
  additionalOutputs:
    - type: introspection
      path: "./schema-introspection.json"
    - type: typescriptDefinitions
      path: "./schema.d.ts"

sdk:
  generate: true
  path: "./hugmenow/web/src/mesh-sdk"
  operations:
    - "./hugmenow/web/src/graphql/operations.graphql"
    - "./hugmenow/web/src/graphql/queries/*.graphql"
    - "./hugmenow/web/src/graphql/mutations/*.graphql"
  options:
    typescript:
      reactHooks: true
      scalars:
        Date: Date
        UUID: string
        JSON: "Record<string, any>"
      unmaskErrors: true
      dedupeFragments: true
      preResolveTypes: true
      skipTypename: false
      documentMode: "documentNode"
      pureMagicComments: true

serve:
  browser: false
  playground: true
  playgroundTitle: "HugMeNow API Gateway"
  playgroundTabs:
    - name: "Get Public Moods"
      query: |
        query GetPublicMoods {
          publicMoods(limit: 5) {
            id
            intensity
            note
            createdAt
            user {
              id
              name
              username
            }
          }
        }
    - name: "User Authentication"
      query: |
        mutation Login($email: String!, $password: String!) {
          login(loginInput: { email: $email, password: $password }) {
            user {
              id
              name
              username
            }
            accessToken
          }
        }
      variables: |
        {
          "email": "demo@example.com",
          "password": "password123"
        }
  cors:
    origin: "*"
    credentials: true
    methods:
      - "GET"
      - "POST"
      - "OPTIONS"
    allowedHeaders:
      - "Content-Type"
      - "Authorization"
      - "x-client-version"
      - "x-client-platform"
  port: 4000
  hostname: "0.0.0.0"
  tracing: true
  introspection: true
  errorOptions:
    maskError: "{process.env.NODE_ENV !== 'development'}"
