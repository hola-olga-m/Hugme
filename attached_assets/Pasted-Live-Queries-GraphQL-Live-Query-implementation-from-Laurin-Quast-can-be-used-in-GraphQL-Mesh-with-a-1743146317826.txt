# GraphQL Live Queries Implementation

This implementation is based on Laurin Quast's approach to Live Queries in GraphQL, and is now integrated with GraphQL Mesh.

## Client-Side Implementation Example

```jsx
import React, { useState, useEffect } from 'react';
import { ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';

// The key is simply adding @live directive to your query
const LIVE_MOODS_QUERY = gql`
  query GetLiveMoods @live {
    userMoods(userId: "550e8400-e29b-41d4-a716-446655440000", limit: 5) {
      id
      intensity
      message
      createdAt
      userId
    }
  }
`;

// The query works just like a regular query, but auto-refreshes when data changes
function MoodsList() {
  const { loading, error, data } = useQuery(LIVE_MOODS_QUERY);

  if (loading) return <p>Loading moods...</p>;
  if (error) return <p>Error loading moods: {error.message}</p>;

  return (
    <div>
      <h2>Your Moods (Live Updates)</h2>
      <p>This list automatically refreshes when you create new moods!</p>
      <ul>
        {data.userMoods.map(mood => (
          <li key={mood.id}>
            <strong>Intensity: {mood.intensity}/10</strong> - {mood.message}
            <br />
            <small>{new Date(mood.createdAt).toLocaleString()}</small>
          </li>
        ))}
      </ul>
    </div>
  );
}

// A form to create new moods
function MoodForm({ onMoodCreate }) {
  const [intensity, setIntensity] = useState(5);
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Call the mutation - no need for refetching queries!
    onMoodCreate({ 
      variables: { 
        input: {
          intensity: parseInt(intensity),
          message,
          userId: "550e8400-e29b-41d4-a716-446655440000"
        }
      }
    });
    
    // Reset form
    setIntensity(5);
    setMessage('');
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Create New Mood</h2>
      <div>
        <label>
          Intensity (1-10):
          <input
            type="range"
            min="1"
            max="10"
            value={intensity}
            onChange={(e) => setIntensity(e.target.value)}
          />
          {intensity}
        </label>
      </div>
      <div>
        <label>
          Message:
          <textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="How are you feeling?"
          />
        </label>
      </div>
      <button type="submit">Save Mood</button>
    </form>
  );
}

// Put it all together in a main component
function MoodTracker() {
  const [createMood] = useMutation(gql`
    mutation CreateMood($input: CreateMoodInput!) {
      createMood(input: $input) {
        id
        intensity
        message
        userId
        createdAt
      }
    }
  `);

  return (
    <div>
      <h1>HugMeNow Mood Tracker</h1>
      <MoodsList />
      <MoodForm onMoodCreate={createMood} />
    </div>
  );
}
```

## How it works

1. The `@live` directive marks a query for real-time updates
2. The server keeps track of these live queries
3. When a mutation happens that affects data related to the query (e.g., creating a mood), the server automatically reruns the query and pushes updated results
4. The client receives these updates seamlessly, without requiring WebSocket subscriptions

## Benefits over traditional subscriptions

1. Simpler client code - just add `@live` to your queries
2. Automatic data refresh only when relevant mutations occur
3. No need to manage WebSocket connections or subscription handlers
4. Less network traffic - only sends data when it actually changes
5. Better state management - always has a complete and current query result

## Server-side configuration

The server handles invalidations through a configuration like:

```yaml
plugins:
  - liveQuery:
      invalidations:
        - field: Mutation.createMood
          invalidate:
            - Query.friendsMoods
            - Query.userMoods
            - Mood:{args.input.userId}
```

This tells the server which queries should be refreshed when specific mutations occur.