{"version":3,"file":"Dashboard-1d1f6cf7.js","sources":["../../src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport LoadingScreen from '../components/common/LoadingScreen';\n\n// Styled components\nconst DashboardContainer = styled.div`\n  min-height: 100vh;\n  background-color: var(--gray-100);\n`;\n\nconst DashboardHeader = styled.header`\n  background-color: white;\n  padding: 1rem;\n  box-shadow: var(--shadow-sm);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: var(--primary-color);\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--primary-light);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 0.5rem;\n`;\n\nconst Username = styled.span`\n  font-weight: 500;\n  margin-right: 1rem;\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--gray-600);\n  cursor: pointer;\n  \n  &:hover {\n    color: var(--danger-color);\n  }\n`;\n\nconst DashboardContent = styled.main`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst WelcomeCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 2rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n  \n  h1 {\n    margin-bottom: 1rem;\n    color: var(--gray-800);\n  }\n  \n  p {\n    color: var(--gray-600);\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst FeaturesGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n`;\n\nconst FeatureCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-md);\n  transition: var(--transition-base);\n  cursor: pointer;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--shadow-lg);\n  }\n  \n  h2 {\n    color: var(--primary-color);\n    margin-bottom: 1rem;\n  }\n  \n  p {\n    color: var(--gray-600);\n  }\n`;\n\nconst StatsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n`;\n\nconst StatCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-sm);\n  text-align: center;\n  \n  h3 {\n    font-size: 2.5rem;\n    color: var(--primary-color);\n    margin-bottom: 0.5rem;\n  }\n  \n  p {\n    color: var(--gray-600);\n    font-size: 0.9rem;\n  }\n`;\n\nconst Dashboard = () => {\n  const { currentUser, logout } = useAuth();\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState({\n    moodStreak: 0,\n    totalMoods: 0,\n    hugsSent: 0,\n    hugsReceived: 0,\n  });\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    // Simulate loading data\n    const timer = setTimeout(() => {\n      // In a real app, you would fetch user stats from the API\n      setStats({\n        moodStreak: 3,\n        totalMoods: 15,\n        hugsSent: 7,\n        hugsReceived: 12,\n      });\n      setIsLoading(false);\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  const handleLogout = async () => {\n    await logout();\n    navigate('/login');\n  };\n  \n  const navigateToFeature = (path) => {\n    navigate(path);\n  };\n  \n  const getInitials = (name) => {\n    if (!name) return '?';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n  \n  if (isLoading) {\n    return <LoadingScreen text=\"Loading dashboard...\" />;\n  }\n  \n  return (\n    <DashboardContainer>\n      <DashboardHeader>\n        <Logo>HugMeNow</Logo>\n        <UserInfo>\n          <Avatar>{getInitials(currentUser?.name)}</Avatar>\n          <Username>{currentUser?.name || 'Guest'}</Username>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </UserInfo>\n      </DashboardHeader>\n      \n      <DashboardContent>\n        <WelcomeCard>\n          <h1>Welcome, {currentUser?.name || 'Friend'}!</h1>\n          <p>\n            This is your personal dashboard where you can track your mood, \n            send and receive virtual hugs, and connect with others.\n          </p>\n        </WelcomeCard>\n        \n        <StatsContainer>\n          <StatCard>\n            <h3>{stats.moodStreak}</h3>\n            <p>Day Streak</p>\n          </StatCard>\n          <StatCard>\n            <h3>{stats.totalMoods}</h3>\n            <p>Moods Tracked</p>\n          </StatCard>\n          <StatCard>\n            <h3>{stats.hugsSent}</h3>\n            <p>Hugs Sent</p>\n          </StatCard>\n          <StatCard>\n            <h3>{stats.hugsReceived}</h3>\n            <p>Hugs Received</p>\n          </StatCard>\n        </StatsContainer>\n        \n        <FeaturesGrid>\n          <FeatureCard onClick={() => navigateToFeature('/mood-tracker')}>\n            <h2>Mood Tracker</h2>\n            <p>\n              Track your daily mood and see patterns in your emotional wellbeing over time.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard onClick={() => navigateToFeature('/hug-center')}>\n            <h2>Hug Center</h2>\n            <p>\n              Send virtual hugs to friends or request hugs from the community when you need support.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard onClick={() => navigateToFeature('/profile')}>\n            <h2>Profile</h2>\n            <p>\n              Manage your personal information, preferences, and privacy settings.\n            </p>\n          </FeatureCard>\n        </FeaturesGrid>\n      </DashboardContent>\n    </DashboardContainer>\n  );\n};\n\nexport default Dashboard;"],"names":["DashboardContainer","styled","DashboardHeader","Logo","UserInfo","Avatar","Username","LogoutButton","DashboardContent","WelcomeCard","FeaturesGrid","FeatureCard","StatsContainer","StatCard","Dashboard","currentUser","logout","useAuth","isLoading","setIsLoading","useState","stats","setStats","navigate","useNavigate","useEffect","timer","handleLogout","navigateToFeature","path","getInitials","name","part","jsx","LoadingScreen","jsxs"],"mappings":"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"}