{"version":3,"file":"Dashboard-b124e1e7.js","sources":["../../src/components/common/LoadingSpinner.jsx","../../src/components/PublicMoodList.jsx","../../src/pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1.5rem;\n`;\n\nconst Spinner = styled.div`\n  width: 40px;\n  height: 40px;\n  border: 4px solid var(--gray-200);\n  border-top: 4px solid var(--primary-color);\n  border-radius: 50%;\n  animation: ${spin} 1s linear infinite;\n`;\n\nconst SpinnerText = styled.div`\n  margin-top: 1rem;\n  color: var(--gray-600);\n  font-size: 0.9rem;\n`;\n\nconst LoadingSpinner = ({ text = 'Loading...' }) => {\n  return (\n    <SpinnerContainer>\n      <Spinner />\n      {text && <SpinnerText>{text}</SpinnerText>}\n    </SpinnerContainer>\n  );\n};\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/client';\nimport { GET_PUBLIC_MOODS } from '../graphql/queries';\nimport LoadingSpinner from './common/LoadingSpinner';\nimport ErrorMessage from './common/ErrorMessage';\n\n// Styled components\nconst PublicMoodsContainer = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n`;\n\nconst MoodsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  \n  h2 {\n    color: var(--gray-800);\n    margin: 0;\n  }\n`;\n\nconst RefreshButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--primary-color);\n  cursor: pointer;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst MoodsList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n  \n  @media (max-width: 640px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst MoodCard = styled.div`\n  border: 1px solid var(--gray-200);\n  border-radius: var(--border-radius);\n  padding: 1rem;\n  transition: var(--transition-base);\n  \n  &:hover {\n    box-shadow: var(--shadow-sm);\n    transform: translateY(-2px);\n  }\n`;\n\nconst MoodHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`;\n\nconst MoodScore = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  \n  .emoji {\n    font-size: 1.5rem;\n  }\n  \n  .label {\n    font-weight: 500;\n    color: var(--gray-800);\n  }\n`;\n\nconst MoodDate = styled.div`\n  font-size: 0.8rem;\n  color: var(--gray-500);\n`;\n\nconst MoodNote = styled.p`\n  color: var(--gray-700);\n  font-size: 0.9rem;\n  margin: 0.5rem 0;\n  line-height: 1.4;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 1rem;\n  font-size: 0.8rem;\n  color: var(--gray-600);\n  \n  .avatar {\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background-color: var(--primary-light);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 0.7rem;\n    margin-right: 0.5rem;\n  }\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: var(--gray-600);\n  \n  p {\n    margin-bottom: 1rem;\n  }\n`;\n\n// Helper functions\nconst getMoodEmoji = (score) => {\n  const emojis = ['😢', '😟', '😐', '🙂', '😄'];\n  return emojis[Math.min(Math.floor(score) - 1, 4)];\n};\n\nconst getMoodLabel = (score) => {\n  const labels = ['Very Sad', 'Sad', 'Neutral', 'Happy', 'Very Happy'];\n  return labels[Math.min(Math.floor(score) - 1, 4)];\n};\n\nconst getFormattedDate = (dateString) => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\nconst getInitials = (name) => {\n  if (!name) return '?';\n  return name\n    .split(' ')\n    .map(part => part[0])\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n};\n\nconst PublicMoodList = () => {\n  const { loading, error, data, refetch } = useQuery(GET_PUBLIC_MOODS);\n  \n  if (loading) return <LoadingSpinner text=\"Loading public moods...\" />;\n  \n  if (error) return <ErrorMessage error={error} />;\n  \n  const publicMoods = data?.publicMoods || [];\n  \n  if (publicMoods.length === 0) {\n    return (\n      <PublicMoodsContainer>\n        <MoodsHeader>\n          <h2>Community Moods</h2>\n          <RefreshButton onClick={() => refetch()}>\n            <span>Refresh</span>\n          </RefreshButton>\n        </MoodsHeader>\n        <EmptyState>\n          <p>No public moods have been shared yet.</p>\n          <p>The community mood board will populate as users share their feelings.</p>\n        </EmptyState>\n      </PublicMoodsContainer>\n    );\n  }\n  \n  return (\n    <PublicMoodsContainer>\n      <MoodsHeader>\n        <h2>Community Moods</h2>\n        <RefreshButton onClick={() => refetch()}>\n          <span>Refresh</span>\n        </RefreshButton>\n      </MoodsHeader>\n      \n      <MoodsList>\n        {publicMoods.map((mood) => (\n          <MoodCard key={mood.id}>\n            <MoodHeader>\n              <MoodScore>\n                <span className=\"emoji\">{getMoodEmoji(mood.score)}</span>\n                <span className=\"label\">{getMoodLabel(mood.score)}</span>\n              </MoodScore>\n              <MoodDate>{getFormattedDate(mood.createdAt)}</MoodDate>\n            </MoodHeader>\n            \n            {mood.note && <MoodNote>{mood.note}</MoodNote>}\n            \n            <UserInfo>\n              <div className=\"avatar\">{getInitials(mood.user?.name)}</div>\n              <span>{mood.user?.name || 'Anonymous User'}</span>\n            </UserInfo>\n          </MoodCard>\n        ))}\n      </MoodsList>\n    </PublicMoodsContainer>\n  );\n};\n\nexport default PublicMoodList;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport LoadingScreen from '../components/common/LoadingScreen';\nimport PublicMoodList from '../components/PublicMoodList';\n\n// Styled components\nconst DashboardContainer = styled.div`\n  min-height: 100vh;\n  background-color: var(--gray-100);\n`;\n\nconst DashboardHeader = styled.header`\n  background-color: white;\n  padding: 1rem;\n  box-shadow: var(--shadow-sm);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: var(--primary-color);\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--primary-light);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 0.5rem;\n`;\n\nconst Username = styled.span`\n  font-weight: 500;\n  margin-right: 1rem;\n`;\n\nconst LogoutButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--gray-600);\n  cursor: pointer;\n  \n  &:hover {\n    color: var(--danger-color);\n  }\n`;\n\nconst DashboardContent = styled.main`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst WelcomeCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 2rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n  \n  h1 {\n    margin-bottom: 1rem;\n    color: var(--gray-800);\n  }\n  \n  p {\n    color: var(--gray-600);\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst FeaturesGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n`;\n\nconst FeatureCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-md);\n  transition: var(--transition-base);\n  cursor: pointer;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--shadow-lg);\n  }\n  \n  h2 {\n    color: var(--primary-color);\n    margin-bottom: 1rem;\n  }\n  \n  p {\n    color: var(--gray-600);\n  }\n`;\n\nconst StatsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n`;\n\nconst StatCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-sm);\n  text-align: center;\n  \n  h3 {\n    font-size: 2.5rem;\n    color: var(--primary-color);\n    margin-bottom: 0.5rem;\n  }\n  \n  p {\n    color: var(--gray-600);\n    font-size: 0.9rem;\n  }\n`;\n\nconst Dashboard = () => {\n  const { currentUser, logout } = useAuth();\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState({\n    moodStreak: 0,\n    totalMoods: 0,\n    hugsSent: 0,\n    hugsReceived: 0,\n  });\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    // Check if we're coming from a login redirect\n    const hasRedirectFlag = localStorage.getItem('redirectToDashboard') === 'true';\n    \n    if (hasRedirectFlag) {\n      console.log('Dashboard detected redirect flag from login');\n      // Clear the flag\n      localStorage.removeItem('redirectToDashboard');\n    }\n    \n    // Simulate loading data\n    const timer = setTimeout(() => {\n      // In a real app, you would fetch user stats from the API\n      setStats({\n        moodStreak: 3,\n        totalMoods: 15,\n        hugsSent: 7,\n        hugsReceived: 12,\n      });\n      setIsLoading(false);\n      \n      if (hasRedirectFlag) {\n        console.log('Dashboard fully loaded after login redirect');\n      }\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  const handleLogout = async () => {\n    await logout();\n    navigate('/login');\n  };\n  \n  const navigateToFeature = (path) => {\n    navigate(path);\n  };\n  \n  const getInitials = (name) => {\n    if (!name) return '?';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n  \n  if (isLoading) {\n    return <LoadingScreen text=\"Loading dashboard...\" />;\n  }\n  \n  return (\n    <DashboardContainer>\n      <DashboardHeader>\n        <Logo>HugMeNow</Logo>\n        <UserInfo>\n          <Avatar>{getInitials(currentUser?.name)}</Avatar>\n          <Username>{currentUser?.name || 'Guest'}</Username>\n          <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n        </UserInfo>\n      </DashboardHeader>\n      \n      <DashboardContent>\n        <WelcomeCard>\n          <h1>Welcome, {currentUser?.name || 'Friend'}!</h1>\n          <p>\n            This is your personal dashboard where you can track your mood, \n            send and receive virtual hugs, and connect with others.\n          </p>\n        </WelcomeCard>\n        \n        <StatsContainer>\n          <StatCard>\n            <h3>{stats.moodStreak}</h3>\n            <p>Day Streak</p>\n          </StatCard>\n          <StatCard>\n            <h3>{stats.totalMoods}</h3>\n            <p>Moods Tracked</p>\n          </StatCard>\n          <StatCard>\n            <h3>{stats.hugsSent}</h3>\n            <p>Hugs Sent</p>\n          </StatCard>\n          <StatCard>\n            <h3>{stats.hugsReceived}</h3>\n            <p>Hugs Received</p>\n          </StatCard>\n        </StatsContainer>\n        \n        <FeaturesGrid>\n          <FeatureCard onClick={() => navigateToFeature('/mood-tracker')}>\n            <h2>Mood Tracker</h2>\n            <p>\n              Track your daily mood and see patterns in your emotional wellbeing over time.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard onClick={() => navigateToFeature('/hug-center')}>\n            <h2>Hug Center</h2>\n            <p>\n              Send virtual hugs to friends or request hugs from the community when you need support.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard onClick={() => navigateToFeature('/profile')}>\n            <h2>Profile</h2>\n            <p>\n              Manage your personal information, preferences, and privacy settings.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard onClick={() => navigateToFeature('/purple-hug-gallery')}>\n            <h2>Purple Hug Gallery</h2>\n            <p>\n              Explore our new collection of purple-themed emotional support icons designed to provide comfort.\n            </p>\n          </FeatureCard>\n        </FeaturesGrid>\n        \n        <div style={{ marginTop: '2rem' }}>\n          <PublicMoodList />\n        </div>\n      </DashboardContent>\n    </DashboardContainer>\n  );\n};\n\nexport default Dashboard;"],"names":["spin","keyframes","SpinnerContainer","styled","Spinner","SpinnerText","LoadingSpinner","text","jsx","PublicMoodsContainer","MoodsHeader","RefreshButton","MoodsList","MoodCard","MoodHeader","MoodScore","MoodDate","MoodNote","UserInfo","EmptyState","getMoodEmoji","score","getMoodLabel","getFormattedDate","dateString","getInitials","name","part","PublicMoodList","loading","error","data","refetch","useQuery","GET_PUBLIC_MOODS","ErrorMessage","publicMoods","jsxs","mood","_a","_b","DashboardContainer","DashboardHeader","Logo","Avatar","Username","LogoutButton","DashboardContent","WelcomeCard","FeaturesGrid","FeatureCard","StatsContainer","StatCard","Dashboard","currentUser","logout","useAuth","isLoading","setIsLoading","useState","stats","setStats","navigate","useNavigate","useEffect","hasRedirectFlag","timer","handleLogout","navigateToFeature","path","LoadingScreen"],"mappings":"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"}