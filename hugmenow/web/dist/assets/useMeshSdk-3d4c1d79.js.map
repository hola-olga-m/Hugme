{"version":3,"file":"useMeshSdk-3d4c1d79.js","sources":["../../src/hooks/useMeshSdk.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { getSdk } from '../mesh-sdk/index.js';\nimport { API_BASE_URL, GRAPHQL_URL } from '../apollo/client.js';\n\n/**\n * Custom hook for using the GraphQL Mesh SDK in React components\n * This provides a more React-friendly way to access Mesh SDK functions\n * \n * @param {Object} options - Configuration options\n * @param {boolean} options.shouldRefetchOnMount - Whether to refetch data when component mounts\n * @param {boolean} options.shouldRefetchOnFocus - Whether to refetch data when window gains focus\n * @returns {Object} The SDK instance and helper functions\n */\nexport const useMeshSdk = (options = {}) => {\n  const { shouldRefetchOnMount = true, shouldRefetchOnFocus = false } = options;\n  \n  // State for tracking loading, error, and last executed operation\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastOperation, setLastOperation] = useState(null);\n  const [lastResult, setLastResult] = useState(null);\n\n  // Create the SDK instance\n  const getSDKInstance = useCallback(() => {\n    // Get the token from localStorage\n    const token = localStorage.getItem('authToken');\n    \n    // Create and return the SDK instance\n    return getSdk({\n      baseUrl: `${API_BASE_URL}${GRAPHQL_URL}`,\n      token,\n      onError: (operation, error) => {\n        console.error(`[Mesh SDK] Error in ${operation}:`, error);\n        setError(error);\n      }\n    });\n  }, []);\n\n  // SDK instance\n  const sdk = getSDKInstance();\n\n  // Add custom method for backward compatibility if not in the SDK\n  if (!sdk.getFriendsMoods && sdk.FriendsMoods) {\n    sdk.getFriendsMoods = sdk.FriendsMoods;\n  }\n\n  // Helper function to wrap SDK calls with loading state\n  const executeOperation = useCallback(async (operationName, operationFn, ...args) => {\n    setLoading(true);\n    setError(null);\n    setLastOperation(operationName);\n    \n    try {\n      const result = await operationFn(...args);\n      setLastResult(result);\n      setLoading(false);\n      return result;\n    } catch (err) {\n      console.error(`[Mesh SDK] Error executing ${operationName}:`, err);\n      setError(err);\n      setLoading(false);\n      throw err;\n    }\n  }, []);\n\n  // Create enhanced SDK with loading state tracking\n  const enhancedSdk = {};\n  \n  // Add all SDK methods with loading state tracking\n  Object.keys(sdk).forEach(method => {\n    enhancedSdk[method] = (...args) => \n      executeOperation(method, sdk[method], ...args);\n  });\n\n  // Window focus event handler for refetching\n  useEffect(() => {\n    if (!shouldRefetchOnFocus || !lastOperation) return;\n\n    const handleFocus = () => {\n      if (lastOperation && enhancedSdk[lastOperation]) {\n        console.log(`[Mesh SDK] Refetching ${lastOperation} on window focus`);\n        enhancedSdk[lastOperation]();\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    return () => window.removeEventListener('focus', handleFocus);\n  }, [shouldRefetchOnFocus, lastOperation, enhancedSdk]);\n\n  // Create final return object with direct method access\n  const returnObj = {\n    sdk: enhancedSdk,\n    loading,\n    error,\n    lastOperation,\n    lastResult,\n    refetch: lastOperation ? enhancedSdk[lastOperation] : null,\n    clearError: () => setError(null)\n  };\n  \n  // Add direct method access\n  Object.keys(enhancedSdk).forEach(method => {\n    returnObj[method] = enhancedSdk[method];\n  });\n  \n  // Add specific aliases for friendsMoods query for backward compatibility\n  if (enhancedSdk.FriendsMoods) {\n    returnObj.getFriendsMoods = enhancedSdk.FriendsMoods;\n  }\n  \n  return returnObj;\n};\n\n/**\n * Custom hook for executing a specific Mesh SDK query\n * This provides a more Apollo-like experience for components that need a single query\n * \n * @param {string} queryName - The name of the SDK query function to execute\n * @param {Object} queryArgs - Arguments to pass to the query function\n * @param {Object} options - Additional options similar to Apollo useQuery\n * @returns {Object} Result object with data, loading, error, and refetch\n */\nexport const useMeshQuery = (queryName, queryArgs = {}, options = {}) => {\n  const { \n    skip = false, \n    pollInterval = 0,\n    shouldRefetchOnMount = true,\n    shouldRefetchOnFocus = false\n  } = options;\n  \n  const { sdk, loading, error, lastResult } = useMeshSdk({\n    shouldRefetchOnMount,\n    shouldRefetchOnFocus\n  });\n\n  const [data, setData] = useState(null);\n  const [queryLoading, setQueryLoading] = useState(true);\n  const [queryError, setQueryError] = useState(null);\n\n  // Execute the query\n  const executeQuery = useCallback(async () => {\n    if (skip || !sdk[queryName]) return;\n    \n    setQueryLoading(true);\n    try {\n      const result = await sdk[queryName](queryArgs);\n      setData(result);\n      setQueryLoading(false);\n      return result;\n    } catch (err) {\n      setQueryError(err);\n      setQueryLoading(false);\n    }\n  }, [skip, sdk, queryName, queryArgs]);\n\n  // Initial query execution\n  useEffect(() => {\n    if (shouldRefetchOnMount) {\n      executeQuery();\n    }\n  }, [executeQuery, shouldRefetchOnMount]);\n\n  // Polling\n  useEffect(() => {\n    if (pollInterval <= 0 || skip) return undefined;\n    \n    const intervalId = setInterval(() => {\n      executeQuery();\n    }, pollInterval);\n    \n    return () => clearInterval(intervalId);\n  }, [pollInterval, executeQuery, skip]);\n\n  return {\n    data,\n    loading: queryLoading,\n    error: queryError,\n    refetch: executeQuery\n  };\n};\n\nexport default useMeshSdk;"],"names":["useMeshSdk","options","shouldRefetchOnMount","shouldRefetchOnFocus","loading","setLoading","useState","error","setError","lastOperation","setLastOperation","lastResult","setLastResult","sdk","useCallback","token","getSdk","API_BASE_URL","GRAPHQL_URL","operation","executeOperation","operationName","operationFn","args","result","err","enhancedSdk","method","useEffect","handleFocus","returnObj"],"mappings":"4DAaO,MAAMA,EAAa,CAACC,EAAU,KAAO,CAC1C,KAAM,CAAE,qBAAAC,EAAuB,GAAM,qBAAAC,EAAuB,IAAUF,EAGhE,CAACG,EAASC,CAAU,EAAIC,WAAS,EAAK,EACtC,CAACC,EAAOC,CAAQ,EAAIF,WAAS,IAAI,EACjC,CAACG,EAAeC,CAAgB,EAAIJ,WAAS,IAAI,EACjD,CAACK,EAAYC,CAAa,EAAIN,WAAS,IAAI,EAmB3CO,EAhBiBC,EAAAA,YAAY,IAAM,CAEjC,MAAAC,EAAQ,aAAa,QAAQ,WAAW,EAG9C,OAAOC,EAAO,CACZ,QAAS,GAAGC,CAAY,GAAGC,CAAW,GACtC,MAAAH,EACA,QAAS,CAACI,EAAWZ,IAAU,CAC7B,QAAQ,MAAM,uBAAuBY,CAAS,IAAKZ,CAAK,EACxDC,EAASD,CAAK,CAChB,CAAA,CACD,CACH,EAAG,CAAE,CAAA,IAMD,CAACM,EAAI,iBAAmBA,EAAI,eAC9BA,EAAI,gBAAkBA,EAAI,cAI5B,MAAMO,EAAmBN,EAAAA,YAAY,MAAOO,EAAeC,KAAgBC,IAAS,CAClFlB,EAAW,EAAI,EACfG,EAAS,IAAI,EACbE,EAAiBW,CAAa,EAE1B,GAAA,CACF,MAAMG,EAAS,MAAMF,EAAY,GAAGC,CAAI,EACxC,OAAAX,EAAcY,CAAM,EACpBnB,EAAW,EAAK,EACTmB,QACAC,EAAK,CACZ,cAAQ,MAAM,8BAA8BJ,CAAa,IAAKI,CAAG,EACjEjB,EAASiB,CAAG,EACZpB,EAAW,EAAK,EACVoB,CACR,CACF,EAAG,CAAE,CAAA,EAGCC,EAAc,CAAA,EAGpB,OAAO,KAAKb,CAAG,EAAE,QAAkBc,GAAA,CACrBD,EAAAC,CAAM,EAAI,IAAIJ,IACxBH,EAAiBO,EAAQd,EAAIc,CAAM,EAAG,GAAGJ,CAAI,CAAA,CAChD,EAGDK,EAAAA,UAAU,IAAM,CACV,GAAA,CAACzB,GAAwB,CAACM,EAAe,OAE7C,MAAMoB,EAAc,IAAM,CACpBpB,GAAiBiB,EAAYjB,CAAa,IACpC,QAAA,IAAI,yBAAyBA,CAAa,kBAAkB,EACpEiB,EAAYjB,CAAa,IAC3B,EAGK,cAAA,iBAAiB,QAASoB,CAAW,EACrC,IAAM,OAAO,oBAAoB,QAASA,CAAW,CAC3D,EAAA,CAAC1B,EAAsBM,EAAeiB,CAAW,CAAC,EAGrD,MAAMI,EAAY,CAChB,IAAKJ,EACL,QAAAtB,EACA,MAAAG,EACA,cAAAE,EACA,WAAAE,EACA,QAASF,EAAgBiB,EAAYjB,CAAa,EAAI,KACtD,WAAY,IAAMD,EAAS,IAAI,CAAA,EAIjC,cAAO,KAAKkB,CAAW,EAAE,QAAkBC,GAAA,CAC/BG,EAAAH,CAAM,EAAID,EAAYC,CAAM,CAAA,CACvC,EAGGD,EAAY,eACdI,EAAU,gBAAkBJ,EAAY,cAGnCI,CACT"}