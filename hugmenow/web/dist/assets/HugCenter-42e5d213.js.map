{"version":3,"file":"HugCenter-42e5d213.js","sources":["../../src/pages/HugCenter.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  GET_SENT_HUGS, \n  GET_RECEIVED_HUGS, \n  GET_MY_HUG_REQUESTS, \n  GET_PENDING_HUG_REQUESTS,\n  GET_COMMUNITY_HUG_REQUESTS,\n  GET_USERS\n} from '../graphql/queries';\nimport { \n  SEND_HUG, \n  MARK_HUG_AS_READ, \n  CREATE_HUG_REQUEST, \n  RESPOND_TO_HUG_REQUEST,\n  CANCEL_HUG_REQUEST\n} from '../graphql/mutations';\nimport LoadingScreen from '../components/common/LoadingScreen';\nimport ErrorMessage from '../components/common/ErrorMessage';\n\n// Styled components\nconst HugCenterContainer = styled.div`\n  min-height: 100vh;\n  background-color: var(--gray-100);\n`;\n\nconst HugCenterHeader = styled.header`\n  background-color: white;\n  padding: 1rem;\n  box-shadow: var(--shadow-sm);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: var(--primary-color);\n  cursor: pointer;\n`;\n\nconst HugCenterContent = styled.main`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst PageTitle = styled.h1`\n  margin-bottom: 1.5rem;\n  color: var(--gray-800);\n`;\n\nconst TabsContainer = styled.div`\n  display: flex;\n  margin-bottom: 2rem;\n  border-bottom: 1px solid var(--gray-300);\n`;\n\nconst Tab = styled.button`\n  padding: 1rem 1.5rem;\n  background: none;\n  border: none;\n  border-bottom: 3px solid ${props => props.active ? 'var(--primary-color)' : 'transparent'};\n  font-weight: ${props => props.active ? '500' : 'normal'};\n  color: ${props => props.active ? 'var(--primary-color)' : 'var(--gray-600)'};\n  cursor: pointer;\n  transition: var(--transition-base);\n  \n  &:hover {\n    color: var(--primary-color);\n  }\n`;\n\nconst Card = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 2rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n`;\n\nconst FormRow = styled.div`\n  margin-bottom: 1.5rem;\n  \n  label {\n    display: block;\n    font-weight: 500;\n    margin-bottom: 0.5rem;\n    color: var(--gray-700);\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--gray-300);\n  border-radius: var(--border-radius);\n  \n  &:focus {\n    outline: none;\n    border-color: var(--primary-color);\n  }\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  min-height: 100px;\n  padding: 0.75rem;\n  border: 1px solid var(--gray-300);\n  border-radius: var(--border-radius);\n  resize: vertical;\n  \n  &:focus {\n    outline: none;\n    border-color: var(--primary-color);\n  }\n`;\n\nconst HugTypeSelector = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst HugTypeOption = styled.button`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n  border: 2px solid ${props => props.selected ? 'var(--primary-color)' : 'var(--gray-200)'};\n  border-radius: var(--border-radius);\n  background-color: ${props => props.selected ? 'var(--primary-light)' : 'white'};\n  cursor: pointer;\n  transition: var(--transition-base);\n  \n  &:hover {\n    border-color: var(--primary-color);\n  }\n  \n  .emoji {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n  }\n  \n  .label {\n    font-weight: ${props => props.selected ? '500' : 'normal'};\n    color: ${props => props.selected ? 'var(--primary-color)' : 'var(--gray-700)'};\n  }\n`;\n\nconst SubmitButton = styled.button`\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: var(--border-radius);\n  padding: 0.75rem 1.5rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: var(--transition-base);\n  \n  &:hover {\n    background-color: var(--primary-dark);\n  }\n  \n  &:disabled {\n    background-color: var(--gray-400);\n    cursor: not-allowed;\n  }\n`;\n\nconst HugsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n`;\n\nconst HugCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-sm);\n  border-left: 4px solid ${props => props.unread ? 'var(--primary-color)' : 'transparent'};\n`;\n\nconst HugCardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n  \n  .avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: var(--primary-light);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    margin-right: 0.75rem;\n  }\n  \n  .name {\n    font-weight: 500;\n    color: var(--gray-800);\n  }\n  \n  .username {\n    font-size: 0.8rem;\n    color: var(--gray-500);\n  }\n`;\n\nconst HugDate = styled.div`\n  font-size: 0.8rem;\n  color: var(--gray-500);\n`;\n\nconst HugContent = styled.div`\n  margin-bottom: 1rem;\n  \n  .hug-type {\n    display: flex;\n    align-items: center;\n    margin-bottom: 0.5rem;\n    \n    .emoji {\n      font-size: 1.5rem;\n      margin-right: 0.5rem;\n    }\n    \n    .type {\n      font-weight: 500;\n      color: var(--primary-color);\n    }\n  }\n  \n  .message {\n    color: var(--gray-700);\n    line-height: 1.5;\n  }\n`;\n\nconst HugActions = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  \n  button {\n    background: none;\n    border: none;\n    color: var(--primary-color);\n    font-size: 0.9rem;\n    cursor: pointer;\n    \n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst RequestsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n`;\n\nconst RequestCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-sm);\n  border-left: 4px solid ${props => {\n    if (props.status === 'PENDING') return 'var(--warning-color)';\n    if (props.status === 'ACCEPTED') return 'var(--success-color)';\n    if (props.status === 'REJECTED') return 'var(--danger-color)';\n    if (props.status === 'CANCELLED') return 'var(--gray-500)';\n    return 'transparent';\n  }};\n`;\n\nconst RequestCardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\n\nconst RequestCardStatus = styled.div`\n  padding: 0.25rem 0.75rem;\n  border-radius: 1rem;\n  font-size: 0.8rem;\n  font-weight: 500;\n  \n  background-color: ${props => {\n    if (props.status === 'PENDING') return 'var(--warning-light)';\n    if (props.status === 'ACCEPTED') return 'var(--success-light)';\n    if (props.status === 'REJECTED') return 'var(--danger-light)';\n    if (props.status === 'CANCELLED') return 'var(--gray-200)';\n    return 'transparent';\n  }};\n  \n  color: ${props => {\n    if (props.status === 'PENDING') return 'var(--warning-color)';\n    if (props.status === 'ACCEPTED') return 'var(--success-color)';\n    if (props.status === 'REJECTED') return 'var(--danger-color)';\n    if (props.status === 'CANCELLED') return 'var(--gray-700)';\n    return 'var(--gray-700)';\n  }};\n`;\n\nconst RequestContent = styled.div`\n  margin-bottom: 1rem;\n  \n  .message {\n    color: var(--gray-700);\n    line-height: 1.5;\n  }\n  \n  .community-tag {\n    display: inline-block;\n    background-color: var(--primary-light);\n    color: var(--primary-color);\n    font-size: 0.8rem;\n    padding: 0.25rem 0.5rem;\n    border-radius: 1rem;\n    margin-top: 0.5rem;\n  }\n`;\n\nconst RequestActions = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.5rem;\n  \n  button {\n    padding: 0.5rem 1rem;\n    border-radius: var(--border-radius);\n    font-size: 0.9rem;\n    cursor: pointer;\n    transition: var(--transition-base);\n  }\n  \n  .accept-btn {\n    background-color: var(--success-color);\n    color: white;\n    border: none;\n    \n    &:hover {\n      background-color: var(--success-dark);\n    }\n  }\n  \n  .reject-btn {\n    background-color: var(--danger-color);\n    color: white;\n    border: none;\n    \n    &:hover {\n      background-color: var(--danger-dark);\n    }\n  }\n  \n  .cancel-btn {\n    background: none;\n    border: 1px solid var(--gray-400);\n    color: var(--gray-700);\n    \n    &:hover {\n      background-color: var(--gray-100);\n    }\n  }\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: var(--gray-600);\n  \n  p {\n    margin-bottom: 1rem;\n  }\n`;\n\n// Helper functions\nconst getHugTypeEmoji = (type) => {\n  const emojiMap = {\n    STANDARD: '🤗',\n    VIRTUAL: '💻',\n    SPECIAL: '✨',\n    ANIMATED: '🎭',\n    CUSTOM: '🎨'\n  };\n  return emojiMap[type] || '🤗';\n};\n\nconst getHugTypeLabel = (type) => {\n  const labelMap = {\n    STANDARD: 'Standard',\n    VIRTUAL: 'Virtual',\n    SPECIAL: 'Special',\n    ANIMATED: 'Animated',\n    CUSTOM: 'Custom'\n  };\n  return labelMap[type] || 'Standard';\n};\n\nconst getRequestStatusLabel = (status) => {\n  const statusMap = {\n    PENDING: 'Pending',\n    ACCEPTED: 'Accepted',\n    REJECTED: 'Rejected',\n    CANCELLED: 'Cancelled'\n  };\n  return statusMap[status] || 'Unknown';\n};\n\nconst getFormattedDate = (dateString) => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nconst getInitials = (name) => {\n  if (!name) return '?';\n  return name\n    .split(' ')\n    .map(part => part[0])\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n};\n\nconst HugCenter = () => {\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('send');\n  const [selectedRecipient, setSelectedRecipient] = useState('');\n  const [hugType, setHugType] = useState('STANDARD');\n  const [hugMessage, setHugMessage] = useState('');\n  const [requestMessage, setRequestMessage] = useState('');\n  const [isCommunityRequest, setIsCommunityRequest] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // GraphQL queries\n  const { data: usersData, loading: usersLoading, error: usersError } = useQuery(GET_USERS);\n  const { data: sentHugsData, loading: sentHugsLoading, error: sentHugsError, refetch: refetchSentHugs } = useQuery(GET_SENT_HUGS);\n  const { data: receivedHugsData, loading: receivedHugsLoading, error: receivedHugsError, refetch: refetchReceivedHugs } = useQuery(GET_RECEIVED_HUGS);\n  const { data: myRequestsData, loading: myRequestsLoading, error: myRequestsError, refetch: refetchMyRequests } = useQuery(GET_MY_HUG_REQUESTS);\n  const { data: pendingRequestsData, loading: pendingRequestsLoading, error: pendingRequestsError, refetch: refetchPendingRequests } = useQuery(GET_PENDING_HUG_REQUESTS);\n  const { data: communityRequestsData, loading: communityRequestsLoading, error: communityRequestsError, refetch: refetchCommunityRequests } = useQuery(GET_COMMUNITY_HUG_REQUESTS);\n  \n  // GraphQL mutations\n  const [sendHug, { loading: sendHugLoading }] = useMutation(SEND_HUG, {\n    onCompleted: () => {\n      refetchSentHugs();\n      resetSendForm();\n    },\n    onError: (error) => {\n      setError(error.message);\n    }\n  });\n  \n  const [markHugAsRead] = useMutation(MARK_HUG_AS_READ, {\n    onCompleted: () => {\n      refetchReceivedHugs();\n    },\n    onError: (error) => {\n      setError(error.message);\n    }\n  });\n  \n  const [createHugRequest, { loading: createRequestLoading }] = useMutation(CREATE_HUG_REQUEST, {\n    onCompleted: () => {\n      refetchMyRequests();\n      refetchCommunityRequests();\n      resetRequestForm();\n    },\n    onError: (error) => {\n      setError(error.message);\n    }\n  });\n  \n  const [respondToHugRequest] = useMutation(RESPOND_TO_HUG_REQUEST, {\n    onCompleted: () => {\n      refetchPendingRequests();\n      refetchCommunityRequests();\n    },\n    onError: (error) => {\n      setError(error.message);\n    }\n  });\n  \n  const [cancelHugRequest] = useMutation(CANCEL_HUG_REQUEST, {\n    onCompleted: () => {\n      refetchMyRequests();\n      refetchCommunityRequests();\n    },\n    onError: (error) => {\n      setError(error.message);\n    }\n  });\n  \n  useEffect(() => {\n    // Set loading state based on all query statuses\n    setLoading(\n      usersLoading || \n      sentHugsLoading || \n      receivedHugsLoading || \n      myRequestsLoading || \n      pendingRequestsLoading || \n      communityRequestsLoading\n    );\n    \n    // Set error if any query has an error\n    if (usersError) setError(usersError.message);\n    if (sentHugsError) setError(sentHugsError.message);\n    if (receivedHugsError) setError(receivedHugsError.message);\n    if (myRequestsError) setError(myRequestsError.message);\n    if (pendingRequestsError) setError(pendingRequestsError.message);\n    if (communityRequestsError) setError(communityRequestsError.message);\n  }, [\n    usersLoading, sentHugsLoading, receivedHugsLoading, myRequestsLoading, pendingRequestsLoading, communityRequestsLoading,\n    usersError, sentHugsError, receivedHugsError, myRequestsError, pendingRequestsError, communityRequestsError\n  ]);\n  \n  const resetSendForm = () => {\n    setSelectedRecipient('');\n    setHugType('STANDARD');\n    setHugMessage('');\n  };\n  \n  const resetRequestForm = () => {\n    setSelectedRecipient('');\n    setRequestMessage('');\n    setIsCommunityRequest(false);\n  };\n  \n  const handleSendHug = async (e) => {\n    e.preventDefault();\n    \n    await sendHug({\n      variables: {\n        sendHugInput: {\n          recipientId: selectedRecipient,\n          type: hugType,\n          message: hugMessage\n        }\n      }\n    });\n  };\n  \n  const handleCreateRequest = async (e) => {\n    e.preventDefault();\n    \n    await createHugRequest({\n      variables: {\n        createHugRequestInput: {\n          recipientId: isCommunityRequest ? null : selectedRecipient,\n          message: requestMessage,\n          isCommunityRequest\n        }\n      }\n    });\n  };\n  \n  const handleMarkAsRead = async (hugId) => {\n    await markHugAsRead({\n      variables: { id: hugId }\n    });\n  };\n  \n  const handleRespondToRequest = async (requestId, accepted) => {\n    await respondToHugRequest({\n      variables: {\n        respondToRequestInput: {\n          requestId,\n          accepted\n        }\n      }\n    });\n  };\n  \n  const handleCancelRequest = async (requestId) => {\n    if (window.confirm('Are you sure you want to cancel this request?')) {\n      await cancelHugRequest({\n        variables: { id: requestId }\n      });\n    }\n  };\n  \n  const navigateToDashboard = () => {\n    navigate('/dashboard');\n  };\n  \n  if (loading) {\n    return <LoadingScreen text=\"Loading hug center...\" />;\n  }\n  \n  const users = usersData?.users || [];\n  const filteredUsers = users.filter(user => user.id !== currentUser?.id);\n  const sentHugs = sentHugsData?.sentHugs || [];\n  const receivedHugs = receivedHugsData?.receivedHugs || [];\n  const myRequests = myRequestsData?.myHugRequests || [];\n  const pendingRequests = pendingRequestsData?.pendingHugRequests || [];\n  const communityRequests = communityRequestsData?.communityHugRequests || [];\n  \n  return (\n    <HugCenterContainer>\n      <HugCenterHeader>\n        <Logo onClick={navigateToDashboard}>HugMeNow</Logo>\n      </HugCenterHeader>\n      \n      <HugCenterContent>\n        <PageTitle>Hug Center</PageTitle>\n        \n        {error && <ErrorMessage error={error} />}\n        \n        <TabsContainer>\n          <Tab \n            active={activeTab === 'send'} \n            onClick={() => setActiveTab('send')}\n          >\n            Send a Hug\n          </Tab>\n          <Tab \n            active={activeTab === 'received'} \n            onClick={() => setActiveTab('received')}\n          >\n            Received Hugs\n          </Tab>\n          <Tab \n            active={activeTab === 'sent'} \n            onClick={() => setActiveTab('sent')}\n          >\n            Sent Hugs\n          </Tab>\n          <Tab \n            active={activeTab === 'request'} \n            onClick={() => setActiveTab('request')}\n          >\n            Request a Hug\n          </Tab>\n          <Tab \n            active={activeTab === 'myRequests'} \n            onClick={() => setActiveTab('myRequests')}\n          >\n            My Requests\n          </Tab>\n          <Tab \n            active={activeTab === 'pendingRequests'} \n            onClick={() => setActiveTab('pendingRequests')}\n          >\n            Pending Requests\n          </Tab>\n          <Tab \n            active={activeTab === 'communityRequests'} \n            onClick={() => setActiveTab('communityRequests')}\n          >\n            Community\n          </Tab>\n        </TabsContainer>\n        \n        {activeTab === 'send' && (\n          <Card>\n            <h2>Send a Virtual Hug</h2>\n            <p>Brighten someone's day with a virtual hug!</p>\n            \n            <form onSubmit={handleSendHug}>\n              <FormRow>\n                <label htmlFor=\"recipient\">Select Recipient</label>\n                <Select \n                  id=\"recipient\" \n                  value={selectedRecipient} \n                  onChange={(e) => setSelectedRecipient(e.target.value)}\n                  required\n                >\n                  <option value=\"\">Select a user...</option>\n                  {filteredUsers.map(user => (\n                    <option key={user.id} value={user.id}>\n                      {user.name} ({user.username})\n                    </option>\n                  ))}\n                </Select>\n              </FormRow>\n              \n              <FormRow>\n                <label>Hug Type</label>\n                <HugTypeSelector>\n                  {['STANDARD', 'VIRTUAL', 'SPECIAL', 'ANIMATED', 'CUSTOM'].map(type => (\n                    <HugTypeOption \n                      key={type}\n                      type=\"button\"\n                      selected={hugType === type}\n                      onClick={() => setHugType(type)}\n                    >\n                      <span className=\"emoji\">{getHugTypeEmoji(type)}</span>\n                      <span className=\"label\">{getHugTypeLabel(type)}</span>\n                    </HugTypeOption>\n                  ))}\n                </HugTypeSelector>\n              </FormRow>\n              \n              <FormRow>\n                <label htmlFor=\"message\">Message (Optional)</label>\n                <TextArea \n                  id=\"message\" \n                  value={hugMessage} \n                  onChange={(e) => setHugMessage(e.target.value)}\n                  placeholder=\"Add a personal message...\"\n                  maxLength={500}\n                />\n              </FormRow>\n              \n              <SubmitButton \n                type=\"submit\" \n                disabled={!selectedRecipient || sendHugLoading}\n              >\n                Send Hug\n              </SubmitButton>\n            </form>\n          </Card>\n        )}\n        \n        {activeTab === 'received' && (\n          <div>\n            <h2>Received Hugs</h2>\n            \n            {receivedHugs.length === 0 ? (\n              <EmptyState>\n                <p>You haven't received any hugs yet.</p>\n                <p>Hugs you receive will appear here.</p>\n              </EmptyState>\n            ) : (\n              <HugsList>\n                {receivedHugs.map(hug => (\n                  <HugCard key={hug.id} unread={!hug.isRead}>\n                    <HugCardHeader>\n                      <UserInfo>\n                        <div className=\"avatar\">{getInitials(hug.sender.name)}</div>\n                        <div>\n                          <div className=\"name\">{hug.sender.name}</div>\n                          <div className=\"username\">@{hug.sender.username}</div>\n                        </div>\n                      </UserInfo>\n                      <HugDate>{getFormattedDate(hug.createdAt)}</HugDate>\n                    </HugCardHeader>\n                    \n                    <HugContent>\n                      <div className=\"hug-type\">\n                        <span className=\"emoji\">{getHugTypeEmoji(hug.type)}</span>\n                        <span className=\"type\">{getHugTypeLabel(hug.type)} Hug</span>\n                      </div>\n                      \n                      {hug.message && <div className=\"message\">{hug.message}</div>}\n                    </HugContent>\n                    \n                    {!hug.isRead && (\n                      <HugActions>\n                        <button onClick={() => handleMarkAsRead(hug.id)}>\n                          Mark as Read\n                        </button>\n                      </HugActions>\n                    )}\n                  </HugCard>\n                ))}\n              </HugsList>\n            )}\n          </div>\n        )}\n        \n        {activeTab === 'sent' && (\n          <div>\n            <h2>Sent Hugs</h2>\n            \n            {sentHugs.length === 0 ? (\n              <EmptyState>\n                <p>You haven't sent any hugs yet.</p>\n                <p>Use the \"Send a Hug\" tab to send your first hug!</p>\n              </EmptyState>\n            ) : (\n              <HugsList>\n                {sentHugs.map(hug => (\n                  <HugCard key={hug.id}>\n                    <HugCardHeader>\n                      <UserInfo>\n                        <div className=\"avatar\">{getInitials(hug.recipient.name)}</div>\n                        <div>\n                          <div className=\"name\">{hug.recipient.name}</div>\n                          <div className=\"username\">@{hug.recipient.username}</div>\n                        </div>\n                      </UserInfo>\n                      <HugDate>{getFormattedDate(hug.createdAt)}</HugDate>\n                    </HugCardHeader>\n                    \n                    <HugContent>\n                      <div className=\"hug-type\">\n                        <span className=\"emoji\">{getHugTypeEmoji(hug.type)}</span>\n                        <span className=\"type\">{getHugTypeLabel(hug.type)} Hug</span>\n                      </div>\n                      \n                      {hug.message && <div className=\"message\">{hug.message}</div>}\n                    </HugContent>\n                    \n                    <HugActions>\n                      <span>{hug.isRead ? 'Read' : 'Unread'}</span>\n                    </HugActions>\n                  </HugCard>\n                ))}\n              </HugsList>\n            )}\n          </div>\n        )}\n        \n        {activeTab === 'request' && (\n          <Card>\n            <h2>Request a Hug</h2>\n            <p>Need a virtual hug? Request one here!</p>\n            \n            <form onSubmit={handleCreateRequest}>\n              <FormRow>\n                <label>Request Type</label>\n                <div style={{ marginBottom: '1rem' }}>\n                  <label style={{ display: 'flex', alignItems: 'center' }}>\n                    <input\n                      type=\"checkbox\"\n                      checked={isCommunityRequest}\n                      onChange={() => setIsCommunityRequest(!isCommunityRequest)}\n                      style={{ marginRight: '0.5rem' }}\n                    />\n                    Request from the community\n                  </label>\n                </div>\n                \n                {!isCommunityRequest && (\n                  <Select \n                    value={selectedRecipient} \n                    onChange={(e) => setSelectedRecipient(e.target.value)}\n                    required={!isCommunityRequest}\n                  >\n                    <option value=\"\">Select a specific user...</option>\n                    {filteredUsers.map(user => (\n                      <option key={user.id} value={user.id}>\n                        {user.name} ({user.username})\n                      </option>\n                    ))}\n                  </Select>\n                )}\n              </FormRow>\n              \n              <FormRow>\n                <label htmlFor=\"requestMessage\">Your Message</label>\n                <TextArea \n                  id=\"requestMessage\" \n                  value={requestMessage} \n                  onChange={(e) => setRequestMessage(e.target.value)}\n                  placeholder=\"Why do you need a hug today?\"\n                  maxLength={500}\n                  required\n                />\n              </FormRow>\n              \n              <SubmitButton \n                type=\"submit\" \n                disabled={(\n                  (!isCommunityRequest && !selectedRecipient) || \n                  !requestMessage || \n                  createRequestLoading\n                )}\n              >\n                Request Hug\n              </SubmitButton>\n            </form>\n          </Card>\n        )}\n        \n        {activeTab === 'myRequests' && (\n          <div>\n            <h2>My Hug Requests</h2>\n            \n            {myRequests.length === 0 ? (\n              <EmptyState>\n                <p>You haven't created any hug requests yet.</p>\n                <p>Use the \"Request a Hug\" tab to create your first request!</p>\n              </EmptyState>\n            ) : (\n              <RequestsList>\n                {myRequests.map(request => (\n                  <RequestCard key={request.id} status={request.status}>\n                    <RequestCardHeader>\n                      <div>\n                        {request.recipient ? (\n                          <UserInfo>\n                            <div className=\"avatar\">{getInitials(request.recipient.name)}</div>\n                            <div>\n                              <div className=\"name\">{request.recipient.name}</div>\n                              <div className=\"username\">@{request.recipient.username}</div>\n                            </div>\n                          </UserInfo>\n                        ) : (\n                          <div>Community Request</div>\n                        )}\n                      </div>\n                      <RequestCardStatus status={request.status}>\n                        {getRequestStatusLabel(request.status)}\n                      </RequestCardStatus>\n                    </RequestCardHeader>\n                    \n                    <RequestContent>\n                      <div className=\"message\">{request.message}</div>\n                      \n                      {request.isCommunityRequest && (\n                        <div className=\"community-tag\">Community Request</div>\n                      )}\n                    </RequestContent>\n                    \n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                      <HugDate>{getFormattedDate(request.createdAt)}</HugDate>\n                      \n                      {request.status === 'PENDING' && (\n                        <RequestActions>\n                          <button \n                            className=\"cancel-btn\"\n                            onClick={() => handleCancelRequest(request.id)}\n                          >\n                            Cancel Request\n                          </button>\n                        </RequestActions>\n                      )}\n                    </div>\n                  </RequestCard>\n                ))}\n              </RequestsList>\n            )}\n          </div>\n        )}\n        \n        {activeTab === 'pendingRequests' && (\n          <div>\n            <h2>Pending Requests For You</h2>\n            \n            {pendingRequests.length === 0 ? (\n              <EmptyState>\n                <p>You don't have any pending hug requests.</p>\n                <p>When someone requests a hug from you, it will appear here.</p>\n              </EmptyState>\n            ) : (\n              <RequestsList>\n                {pendingRequests.map(request => (\n                  <RequestCard key={request.id} status={request.status}>\n                    <RequestCardHeader>\n                      <UserInfo>\n                        <div className=\"avatar\">{getInitials(request.requester.name)}</div>\n                        <div>\n                          <div className=\"name\">{request.requester.name}</div>\n                          <div className=\"username\">@{request.requester.username}</div>\n                        </div>\n                      </UserInfo>\n                      <RequestCardStatus status={request.status}>\n                        {getRequestStatusLabel(request.status)}\n                      </RequestCardStatus>\n                    </RequestCardHeader>\n                    \n                    <RequestContent>\n                      <div className=\"message\">{request.message}</div>\n                    </RequestContent>\n                    \n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                      <HugDate>{getFormattedDate(request.createdAt)}</HugDate>\n                      \n                      <RequestActions>\n                        <button \n                          className=\"accept-btn\"\n                          onClick={() => handleRespondToRequest(request.id, true)}\n                        >\n                          Accept\n                        </button>\n                        <button \n                          className=\"reject-btn\"\n                          onClick={() => handleRespondToRequest(request.id, false)}\n                        >\n                          Decline\n                        </button>\n                      </RequestActions>\n                    </div>\n                  </RequestCard>\n                ))}\n              </RequestsList>\n            )}\n          </div>\n        )}\n        \n        {activeTab === 'communityRequests' && (\n          <div>\n            <h2>Community Hug Requests</h2>\n            \n            {communityRequests.length === 0 ? (\n              <EmptyState>\n                <p>There are no active community hug requests.</p>\n                <p>When someone requests a hug from the community, it will appear here.</p>\n              </EmptyState>\n            ) : (\n              <RequestsList>\n                {communityRequests.map(request => (\n                  <RequestCard key={request.id} status={request.status}>\n                    <RequestCardHeader>\n                      <UserInfo>\n                        <div className=\"avatar\">{getInitials(request.requester.name)}</div>\n                        <div>\n                          <div className=\"name\">{request.requester.name}</div>\n                          <div className=\"username\">@{request.requester.username}</div>\n                        </div>\n                      </UserInfo>\n                      <RequestCardStatus status={request.status}>\n                        {getRequestStatusLabel(request.status)}\n                      </RequestCardStatus>\n                    </RequestCardHeader>\n                    \n                    <RequestContent>\n                      <div className=\"message\">{request.message}</div>\n                      <div className=\"community-tag\">Community Request</div>\n                    </RequestContent>\n                    \n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                      <HugDate>{getFormattedDate(request.createdAt)}</HugDate>\n                      \n                      {request.status === 'PENDING' && request.requester.id !== currentUser?.id && (\n                        <RequestActions>\n                          <button \n                            className=\"accept-btn\"\n                            onClick={() => handleRespondToRequest(request.id, true)}\n                          >\n                            Send a Hug\n                          </button>\n                        </RequestActions>\n                      )}\n                      \n                      {request.status === 'PENDING' && request.requester.id === currentUser?.id && (\n                        <RequestActions>\n                          <button \n                            className=\"cancel-btn\"\n                            onClick={() => handleCancelRequest(request.id)}\n                          >\n                            Cancel Request\n                          </button>\n                        </RequestActions>\n                      )}\n                    </div>\n                  </RequestCard>\n                ))}\n              </RequestsList>\n            )}\n          </div>\n        )}\n      </HugCenterContent>\n    </HugCenterContainer>\n  );\n};\n\nexport default HugCenter;"],"names":["HugCenterContainer","styled","HugCenterHeader","Logo","HugCenterContent","PageTitle","TabsContainer","Tab","props","Card","FormRow","Select","TextArea","HugTypeSelector","HugTypeOption","SubmitButton","HugsList","HugCard","HugCardHeader","UserInfo","HugDate","HugContent","HugActions","RequestsList","RequestCard","RequestCardHeader","RequestCardStatus","RequestContent","RequestActions","EmptyState","getHugTypeEmoji","type","getHugTypeLabel","getRequestStatusLabel","status","getFormattedDate","dateString","getInitials","name","part","HugCenter","currentUser","useAuth","navigate","useNavigate","activeTab","setActiveTab","useState","selectedRecipient","setSelectedRecipient","hugType","setHugType","hugMessage","setHugMessage","requestMessage","setRequestMessage","isCommunityRequest","setIsCommunityRequest","loading","setLoading","error","setError","usersData","usersLoading","usersError","useQuery","GET_USERS","sentHugsData","sentHugsLoading","sentHugsError","refetchSentHugs","GET_SENT_HUGS","receivedHugsData","receivedHugsLoading","receivedHugsError","refetchReceivedHugs","GET_RECEIVED_HUGS","myRequestsData","myRequestsLoading","myRequestsError","refetchMyRequests","GET_MY_HUG_REQUESTS","pendingRequestsData","pendingRequestsLoading","pendingRequestsError","refetchPendingRequests","GET_PENDING_HUG_REQUESTS","communityRequestsData","communityRequestsLoading","communityRequestsError","refetchCommunityRequests","GET_COMMUNITY_HUG_REQUESTS","sendHug","sendHugLoading","useMutation","SEND_HUG","resetSendForm","markHugAsRead","MARK_HUG_AS_READ","createHugRequest","createRequestLoading","CREATE_HUG_REQUEST","resetRequestForm","respondToHugRequest","RESPOND_TO_HUG_REQUEST","cancelHugRequest","CANCEL_HUG_REQUEST","useEffect","handleSendHug","e","handleCreateRequest","handleMarkAsRead","hugId","handleRespondToRequest","requestId","accepted","handleCancelRequest","navigateToDashboard","jsx","LoadingScreen","filteredUsers","user","sentHugs","receivedHugs","myRequests","pendingRequests","communityRequests","ErrorMessage","jsxs","hug","request"],"mappings":"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"}