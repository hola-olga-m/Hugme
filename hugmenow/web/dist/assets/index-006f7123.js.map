{"version":3,"file":"index-006f7123.js","sources":["../../src/utils/humanHugIcons.js","../../src/components/HumanHugIcon/index.js","../../src/pages/HumanHugGalleryDemo/index.js"],"sourcesContent":["/**\n * Human Hug Icons Utilities\n * \n * This module provides utilities for working with human-figured hug icons.\n * It includes constants and helper functions for accessing static and animated icons.\n */\n\n// Hug types based on the reference grid image\nexport const HUG_TYPES = {\n  BEAR_HUG: 'BearHug',\n  SUPPORTING: 'Supporting',\n  COMFORTING: 'Comforting',\n  LOVING: 'Loving',\n  CELEBRATING: 'Celebrating',\n  FESTIVE: 'Festive',\n  CARING: 'Caring',\n  TEASING: 'Teasing',\n  INVITING: 'Inviting',\n  MOODY: 'Moody'\n};\n\n// Map of animation types for each hug type\nconst ANIMATION_TYPES = {\n  [HUG_TYPES.BEAR_HUG]: 'breathing',\n  [HUG_TYPES.SUPPORTING]: 'breathing',\n  [HUG_TYPES.COMFORTING]: 'breathing',\n  [HUG_TYPES.LOVING]: 'pulsing',\n  [HUG_TYPES.CELEBRATING]: 'bouncing',\n  [HUG_TYPES.FESTIVE]: 'bouncing',\n  [HUG_TYPES.CARING]: 'breathing',\n  [HUG_TYPES.TEASING]: 'breathing',\n  [HUG_TYPES.INVITING]: 'breathing',\n  [HUG_TYPES.MOODY]: 'breathing'\n};\n\n// Function to import all static icons dynamically\nfunction importAllStaticIcons() {\n  const hugIcons = {};\n  \n  // For each hug type, import variants 1-4\n  Object.values(HUG_TYPES).forEach(hugType => {\n    hugIcons[hugType] = [];\n    \n    // Each hug type has 4 variants (rows in the grid)\n    for (let variant = 1; variant <= 4; variant++) {\n      try {\n        // Use dynamic import (this works with Vite)\n        hugIcons[hugType].push({\n          static: `/src/assets/icons/png-icons/${hugType}_${variant}.png`,\n          variant\n        });\n      } catch (error) {\n        console.error(`Failed to import icon: ${hugType}_${variant}.png`, error);\n      }\n    }\n  });\n  \n  return hugIcons;\n}\n\n/**\n * Get animation frames for a specific hug icon\n * \n * @param {string} iconName - The base name of the icon (e.g., \"BearHug_1\")\n * @param {string} animationType - The type of animation\n * @returns {Array} Array of frame paths\n */\nexport const getAnimationFrames = (iconName, animationType) => {\n  const frames = [];\n  // Generate paths for 30 frames\n  for (let i = 1; i <= 30; i++) {\n    frames.push(`/src/assets/icons/png-icons/${iconName}_frame${i}.png`);\n  }\n  return frames;\n};\n\n/**\n * Determine the animation type for a hug type\n * \n * @param {string} hugType - The hug type (e.g., \"BearHug\")\n * @returns {string} The animation type\n */\nexport const getAnimationType = (hugType) => {\n  return ANIMATION_TYPES[hugType] || 'breathing';\n};\n\n// Export the static icons\nexport const HUG_ICONS = importAllStaticIcons();\n\n/**\n * Get animation frames for a specific hug type and variant\n * \n * @param {string} hugType - The hug type (e.g., \"BearHug\")\n * @param {number} variant - The variant number (1-4)\n * @returns {Array} Array of animation frame paths\n */\nexport const getHugAnimationFrames = (hugType, variant = 1) => {\n  const iconName = `${hugType}_${variant}`;\n  const animationType = getAnimationType(hugType);\n  return getAnimationFrames(iconName, animationType);\n};","/**\n * HumanHugIcon Component\n * \n * This component displays human-figured hug icons with animations.\n * It supports both static display and animated display modes.\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { HUG_TYPES, HUG_ICONS, getHugAnimationFrames, getAnimationType } from '../../utils/humanHugIcons';\n\n// Styled components for the HumanHugIcon\nconst IconContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  cursor: ${props => props.onClick ? 'pointer' : 'default'};\n  transition: transform 0.2s ease;\n  \n  &:hover {\n    transform: ${props => props.onClick ? 'scale(1.05)' : 'none'};\n  }\n`;\n\nconst IconWrapper = styled.div`\n  width: ${props => props.size || '120px'};\n  height: ${props => props.size || '120px'};\n  border-radius: ${props => props.circular ? '50%' : '12px'};\n  overflow: hidden;\n  background-color: ${props => props.backgroundColor || 'transparent'};\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst IconImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n`;\n\nconst IconCaption = styled.div`\n  font-size: 14px;\n  text-align: center;\n  color: ${props => props.selected ? '#ff6b8b' : '#666'};\n  font-weight: ${props => props.selected ? 'bold' : 'normal'};\n  margin-top: 8px;\n`;\n\n/**\n * HumanHugIcon Component\n * \n * @param {Object} props - Component props\n * @param {string} props.type - Type of hug (one of HUG_TYPES keys or values)\n * @param {string} props.size - Size of the icon (e.g., '120px', '200px')\n * @param {boolean} props.circular - Whether to display the icon in a circular shape\n * @param {boolean} props.animated - Whether to animate the icon\n * @param {boolean} props.showCaption - Whether to show the caption\n * @param {boolean} props.selected - Whether the icon is selected (affects caption style)\n * @param {Function} props.onClick - Click handler for the icon\n */\nconst HumanHugIcon = ({ \n  type = HUG_TYPES.BEAR_HUG, \n  variant = 1,\n  size = '120px', \n  circular = false, \n  animated = false, \n  showCaption = true, \n  selected = false, \n  onClick = null,\n  backgroundColor = 'transparent'\n}) => {\n  // State for tracking animation\n  const [currentFrame, setCurrentFrame] = useState(0);\n  const [animationFrames, setAnimationFrames] = useState([]);\n  const animationRef = useRef(null);\n  \n  // Normalize the type to ensure it's a valid hug type\n  const normalizedType = Object.values(HUG_TYPES).includes(type) ? type : HUG_TYPES.BEAR_HUG;\n  \n  // Ensure variant is between 1 and 4\n  const normalizedVariant = Math.min(Math.max(variant, 1), 4);\n  \n  // Get the specific icon information\n  const iconInfo = HUG_ICONS[normalizedType]?.find(icon => icon.variant === normalizedVariant) || \n                  HUG_ICONS[HUG_TYPES.BEAR_HUG][0];\n  \n  // Format the display name by adding spaces\n  const displayName = normalizedType.replace(/([A-Z])/g, ' $1').trim();\n  \n  // Set up animation frames when animated prop changes\n  useEffect(() => {\n    if (animated) {\n      const frames = getHugAnimationFrames(normalizedType, normalizedVariant);\n      setAnimationFrames(frames);\n      \n      // Start animation loop\n      const runAnimation = () => {\n        setCurrentFrame(prev => (prev + 1) % frames.length);\n        animationRef.current = requestAnimationFrame(runAnimation);\n      };\n      \n      animationRef.current = requestAnimationFrame(runAnimation);\n      \n      // Clean up animation loop when component unmounts or animated changes\n      return () => {\n        if (animationRef.current) {\n          cancelAnimationFrame(animationRef.current);\n        }\n      };\n    } else {\n      // Stop animation if disabled\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      setAnimationFrames([]);\n    }\n  }, [animated, normalizedType, normalizedVariant]);\n  \n  // Determine the source of the image (static or animated frame)\n  const imageSrc = animated && animationFrames.length > 0 \n    ? animationFrames[currentFrame] \n    : iconInfo.static;\n  \n  return (\n    <IconContainer onClick={onClick}>\n      <IconWrapper \n        size={size} \n        circular={circular}\n        backgroundColor={backgroundColor}\n      >\n        <IconImage \n          src={imageSrc} \n          alt={`${displayName} hug icon`} \n        />\n      </IconWrapper>\n      \n      {showCaption && (\n        <IconCaption selected={selected}>\n          {displayName}\n        </IconCaption>\n      )}\n    </IconContainer>\n  );\n};\n\nexport default HumanHugIcon;","/**\n * HumanHugGalleryDemo Page\n * \n * This page showcases the human-figured hug icons with animations.\n */\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport HumanHugIcon from '../../components/HumanHugIcon';\nimport { HUG_TYPES } from '../../utils/humanHugIcons';\n\n// Page container with responsive grid layout\nconst PageContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n`;\n\nconst Header = styled.header`\n  text-align: center;\n  margin-bottom: 2rem;\n  \n  h1 {\n    font-size: 2rem;\n    color: #333;\n    margin-bottom: 0.5rem;\n  }\n  \n  p {\n    font-size: 1rem;\n    color: #666;\n  }\n`;\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 2rem;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nconst ControlGroup = styled.div`\n  margin: 0 1rem;\n  \n  @media (max-width: 768px) {\n    margin: 0.5rem 0;\n  }\n  \n  label {\n    margin-right: 0.5rem;\n    font-weight: bold;\n  }\n  \n  select, button {\n    padding: 0.5rem;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n  }\n  \n  button {\n    background-color: #4a90e2;\n    color: white;\n    border: none;\n    cursor: pointer;\n    \n    &:hover {\n      background-color: #357abD;\n    }\n  }\n`;\n\nconst IconsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 2rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n    gap: 1rem;\n  }\n`;\n\n/**\n * HumanHugGalleryDemo Component\n */\nconst HumanHugGalleryDemo = () => {\n  // State for display options\n  const [iconSize, setIconSize] = useState('120px');\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [isCircular, setIsCircular] = useState(false);\n  const [showCaptions, setShowCaptions] = useState(true);\n  \n  // Convert HUG_TYPES object to array for easier mapping\n  const hugTypesArray = Object.values(HUG_TYPES);\n  \n  return (\n    <PageContainer>\n      <Header>\n        <h1>Human Hug Icons Gallery</h1>\n        <p>Explore our collection of human-figured hug icons</p>\n      </Header>\n      \n      <ControlsContainer>\n        <ControlGroup>\n          <label htmlFor=\"size-select\">Size:</label>\n          <select \n            id=\"size-select\"\n            value={iconSize}\n            onChange={(e) => setIconSize(e.target.value)}\n          >\n            <option value=\"80px\">Small</option>\n            <option value=\"120px\">Medium</option>\n            <option value=\"160px\">Large</option>\n          </select>\n        </ControlGroup>\n        \n        <ControlGroup>\n          <button onClick={() => setIsAnimated(!isAnimated)}>\n            {isAnimated ? 'Disable Animation' : 'Enable Animation'}\n          </button>\n        </ControlGroup>\n        \n        <ControlGroup>\n          <button onClick={() => setIsCircular(!isCircular)}>\n            {isCircular ? 'Square Icons' : 'Circular Icons'}\n          </button>\n        </ControlGroup>\n        \n        <ControlGroup>\n          <button onClick={() => setShowCaptions(!showCaptions)}>\n            {showCaptions ? 'Hide Captions' : 'Show Captions'}\n          </button>\n        </ControlGroup>\n      </ControlsContainer>\n      \n      <IconsGrid>\n        {hugTypesArray.map((hugType) => (\n          <HumanHugIcon\n            key={hugType}\n            type={hugType}\n            size={iconSize}\n            animated={isAnimated}\n            circular={isCircular}\n            showCaption={showCaptions}\n            onClick={() => console.log(`Clicked on ${hugType} icon`)}\n          />\n        ))}\n      </IconsGrid>\n    </PageContainer>\n  );\n};\n\nexport default HumanHugGalleryDemo;"],"names":["HUG_TYPES","importAllStaticIcons","hugIcons","hugType","variant","error","getAnimationFrames","iconName","animationType","frames","i","HUG_ICONS","getHugAnimationFrames","IconContainer","styled","props","IconWrapper","IconImage","IconCaption","HumanHugIcon","type","size","circular","animated","showCaption","selected","onClick","backgroundColor","currentFrame","setCurrentFrame","useState","animationFrames","setAnimationFrames","animationRef","useRef","normalizedType","normalizedVariant","iconInfo","_a","icon","displayName","useEffect","runAnimation","prev","imageSrc","jsxs","jsx","PageContainer","Header","ControlsContainer","ControlGroup","IconsGrid","HumanHugGalleryDemo","iconSize","setIconSize","isAnimated","setIsAnimated","isCircular","setIsCircular","showCaptions","setShowCaptions","hugTypesArray","e"],"mappings":"mGAQO,MAAMA,EAAY,CACvB,SAAU,UACV,WAAY,aACZ,WAAY,aACZ,OAAQ,SACR,YAAa,cACb,QAAS,UACT,OAAQ,SACR,QAAS,UACT,SAAU,WACV,MAAO,OACT,EAiBA,SAASC,GAAuB,CAC9B,MAAMC,EAAW,CAAA,EAGjB,cAAO,OAAOF,CAAS,EAAE,QAAmBG,GAAA,CACjCD,EAAAC,CAAO,EAAI,GAGpB,QAASC,EAAU,EAAGA,GAAW,EAAGA,IAC9B,GAAA,CAEOF,EAAAC,CAAO,EAAE,KAAK,CACrB,OAAQ,+BAA+BA,CAAO,IAAIC,CAAO,OACzD,QAAAA,CAAA,CACD,QACMC,EAAO,CACd,QAAQ,MAAM,0BAA0BF,CAAO,IAAIC,CAAO,OAAQC,CAAK,CACzE,CACF,CACD,EAEMH,CACT,CASa,MAAAI,EAAqB,CAACC,EAAUC,IAAkB,CAC7D,MAAMC,EAAS,CAAA,EAEf,QAASC,EAAI,EAAGA,GAAK,GAAIA,IACvBD,EAAO,KAAK,+BAA+BF,CAAQ,SAASG,CAAC,MAAM,EAE9D,OAAAD,CACT,EAaaE,EAAYV,EAAqB,EASjCW,EAAwB,CAACT,EAASC,EAAU,IAAM,CAC7D,MAAMG,EAAW,GAAGJ,CAAO,IAAIC,CAAO,GAE/B,OAAAE,EAAmBC,CAAuB,CACnD,ECxFMM,EAAgBC,EAAO;AAAA;AAAA;AAAA;AAAA,YAIRC,GAAAA,EAAM,QAAU,UAAY,SAAS;AAAA;AAAA;AAAA;AAAA,iBAIhCA,GAAAA,EAAM,QAAU,cAAgB,MAAM;AAAA;AAAA,EAI1DC,EAAcF,EAAO;AAAA,WAChBC,GAASA,EAAM,MAAQ,OAAO;AAAA,YAC7BA,GAASA,EAAM,MAAQ,OAAO;AAAA,mBACdA,GAAAA,EAAM,SAAW,MAAQ,MAAM;AAAA;AAAA,sBAErCA,GAASA,EAAM,iBAAmB,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/DE,EAAYH,EAAO;AAAA;AAAA;AAAA;AAAA,EAMnBI,EAAcJ,EAAO;AAAA;AAAA;AAAA,WAGPC,GAAAA,EAAM,SAAW,UAAY,MAAM;AAAA,iBAC7BA,GAAAA,EAAM,SAAW,OAAS,QAAQ;AAAA;AAAA,EAgBtDI,EAAe,CAAC,CACpB,KAAAC,EAAOpB,EAAU,SACjB,QAAAI,EAAU,EACV,KAAAiB,EAAO,QACP,SAAAC,EAAW,GACX,SAAAC,EAAW,GACX,YAAAC,EAAc,GACd,SAAAC,EAAW,GACX,QAAAC,EAAU,KACV,gBAAAC,EAAkB,aACpB,IAAM,OAEJ,KAAM,CAACC,EAAcC,CAAe,EAAIC,WAAS,CAAC,EAC5C,CAACC,EAAiBC,CAAkB,EAAIF,EAAA,SAAS,CAAE,CAAA,EACnDG,EAAeC,SAAO,IAAI,EAG1BC,EAAiB,OAAO,OAAOnC,CAAS,EAAE,SAASoB,CAAI,EAAIA,EAAOpB,EAAU,SAG5EoC,EAAoB,KAAK,IAAI,KAAK,IAAIhC,EAAS,CAAC,EAAG,CAAC,EAGpDiC,IAAWC,EAAA3B,EAAUwB,CAAc,IAAxB,YAAAG,EAA2B,KAAaC,GAAAA,EAAK,UAAYH,KAC1DzB,EAAUX,EAAU,QAAQ,EAAE,CAAC,EAGzCwC,EAAcL,EAAe,QAAQ,WAAY,KAAK,EAAE,OAG9DM,EAAAA,UAAU,IAAM,CACd,GAAIlB,EAAU,CACN,MAAAd,EAASG,EAAsBuB,EAAgBC,CAAiB,EACtEJ,EAAmBvB,CAAM,EAGzB,MAAMiC,EAAe,IAAM,CACzBb,EAAyBc,IAAAA,EAAO,GAAKlC,EAAO,MAAM,EACrCwB,EAAA,QAAU,sBAAsBS,CAAY,CAAA,EAG9C,OAAAT,EAAA,QAAU,sBAAsBS,CAAY,EAGlD,IAAM,CACPT,EAAa,SACf,qBAAqBA,EAAa,OAAO,CAC3C,CACF,MAGIA,EAAa,SACf,qBAAqBA,EAAa,OAAO,EAE3CD,EAAmB,CAAE,CAAA,CAEtB,EAAA,CAACT,EAAUY,EAAgBC,CAAiB,CAAC,EAG1C,MAAAQ,EAAWrB,GAAYQ,EAAgB,OAAS,EAClDA,EAAgBH,CAAY,EAC5BS,EAAS,OAGX,OAAAQ,OAAChC,GAAc,QAAAa,EACb,SAAA,CAAAoB,EAAA,IAAC9B,EAAA,CACC,KAAAK,EACA,SAAAC,EACA,gBAAAK,EAEA,SAAAmB,EAAA,IAAC7B,EAAA,CACC,IAAK2B,EACL,IAAK,GAAGJ,CAAW,WAAA,CACrB,CAAA,CACF,EAEChB,GACCsB,EAAA,IAAC5B,EAAY,CAAA,SAAAO,EACV,SACHe,EAAA,CAEJ,CAAA,CAAA,CAEJ,ECtIMO,EAAgBjC,EAAO;AAAA;AAAA;AAAA;AAAA,EAMvBkC,EAASlC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBhBmC,EAAoBnC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW3BoC,EAAepC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BtBqC,EAAYrC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcnBsC,EAAsB,IAAM,CAEhC,KAAM,CAACC,EAAUC,CAAW,EAAIxB,WAAS,OAAO,EAC1C,CAACyB,EAAYC,CAAa,EAAI1B,WAAS,EAAK,EAC5C,CAAC2B,EAAYC,CAAa,EAAI5B,WAAS,EAAK,EAC5C,CAAC6B,EAAcC,CAAe,EAAI9B,WAAS,EAAI,EAG/C+B,EAAgB,OAAO,OAAO7D,CAAS,EAE7C,cACG+C,EACC,CAAA,SAAA,CAAAF,OAACG,EACC,CAAA,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAuB,yBAAA,CAAA,EAC3BA,EAAAA,IAAC,KAAE,SAAiD,mDAAA,CAAA,CAAA,EACtD,SAECG,EACC,CAAA,SAAA,CAAAJ,OAACK,EACC,CAAA,SAAA,CAACJ,EAAA,IAAA,QAAA,CAAM,QAAQ,cAAc,SAAK,QAAA,EAClCD,EAAA,KAAC,SAAA,CACC,GAAG,cACH,MAAOQ,EACP,SAAWS,GAAMR,EAAYQ,EAAE,OAAO,KAAK,EAE3C,SAAA,CAAChB,EAAA,IAAA,SAAA,CAAO,MAAM,OAAO,SAAK,QAAA,EACzBA,EAAA,IAAA,SAAA,CAAO,MAAM,QAAQ,SAAM,SAAA,EAC3BA,EAAA,IAAA,SAAA,CAAO,MAAM,QAAQ,SAAK,QAAA,CAAA,CAAA,CAC7B,CAAA,EACF,EAECA,EAAA,IAAAI,EAAA,CACC,SAACJ,EAAAA,IAAA,SAAA,CAAO,QAAS,IAAMU,EAAc,CAACD,CAAU,EAC7C,SAAaA,EAAA,oBAAsB,kBACtC,CAAA,EACF,EAECT,EAAA,IAAAI,EAAA,CACC,SAACJ,EAAAA,IAAA,SAAA,CAAO,QAAS,IAAMY,EAAc,CAACD,CAAU,EAC7C,SAAaA,EAAA,eAAiB,gBACjC,CAAA,EACF,EAECX,EAAA,IAAAI,EAAA,CACC,SAACJ,EAAAA,IAAA,SAAA,CAAO,QAAS,IAAMc,EAAgB,CAACD,CAAY,EACjD,SAAeA,EAAA,gBAAkB,eACpC,CAAA,EACF,CAAA,EACF,EAECb,EAAA,IAAAK,EAAA,CACE,SAAcU,EAAA,IAAK1D,GAClB2C,EAAA,IAAC3B,EAAA,CAEC,KAAMhB,EACN,KAAMkD,EACN,SAAUE,EACV,SAAUE,EACV,YAAaE,EACb,QAAS,IAAM,QAAQ,IAAI,cAAcxD,CAAO,OAAO,CAAA,EANlDA,CAQR,CAAA,EACH,CACF,CAAA,CAAA,CAEJ"}