{"version":3,"file":"hug-icons-90039baa.js","sources":["../../src/utils/hugIcons.js","../../src/components/HugIcon/index.js"],"sourcesContent":["/**\n * Utility for accessing hug icons throughout the application\n * Provides consistent access to icon assets for all hug types\n */\n\n// Import SVG icons\nimport StandardHugIcon from '../assets/icons/StandardHug.svg';\nimport SupportiveHugIcon from '../assets/icons/SupportiveHug.svg';\nimport GroupHugIcon from '../assets/icons/GroupHug.svg';\nimport ComfortingHugIcon from '../assets/icons/ComfortingHug.svg';\nimport EnthusiasticHugIcon from '../assets/icons/EnthusiasticHug.svg';\nimport VirtualHugIcon from '../assets/icons/VirtualHug.svg';\n\n/**\n * Object containing all hug icons mapped by their type\n */\nexport const HUG_ICONS = {\n  standard: {\n    icon: StandardHugIcon,\n    name: 'Standard Hug',\n    color: '#FFC107',\n    description: 'A warm, friendly hug to show you care'\n  },\n  supportive: {\n    icon: SupportiveHugIcon,\n    name: 'Supportive Hug',\n    color: '#FFA726',\n    description: 'A reassuring hug when someone needs support'\n  },\n  group: {\n    icon: GroupHugIcon,\n    name: 'Group Hug',\n    color: '#4CAF50',\n    description: 'Bring everyone together with a group hug'\n  },\n  comforting: {\n    icon: ComfortingHugIcon,\n    name: 'Comforting Hug',\n    color: '#5C6BC0',\n    description: 'A gentle hug to comfort in difficult times'\n  },\n  enthusiastic: {\n    icon: EnthusiasticHugIcon,\n    name: 'Enthusiastic Hug',\n    color: '#FF7043',\n    description: 'An energetic hug to celebrate good news'\n  },\n  virtual: {\n    icon: VirtualHugIcon,\n    name: 'Virtual Hug',\n    color: '#7E57C2',\n    description: 'A digital hug across any distance'\n  }\n};\n\n/**\n * Get hug icon by type\n * @param {string} type - Type of hug icon to retrieve\n * @returns {string} URL to the SVG icon\n */\nexport const getHugIconByType = (type) => {\n  const hugType = type?.toLowerCase() || 'standard';\n  return HUG_ICONS[hugType]?.icon || HUG_ICONS.standard.icon;\n};\n\n/**\n * Get all available hug types\n * @returns {Array<string>} Array of hug type names\n */\nexport const getHugTypes = () => {\n  return Object.keys(HUG_ICONS);\n};\n\n/**\n * Get color associated with hug type\n * @param {string} type - Type of hug \n * @returns {string} Hex color code\n */\nexport const getHugTypeColor = (type) => {\n  const hugType = type?.toLowerCase() || 'standard';\n  return HUG_ICONS[hugType]?.color || HUG_ICONS.standard.color;\n};\n\n/**\n * Get display name for hug type\n * @param {string} type - Type of hug\n * @returns {string} Display name\n */\nexport const getHugTypeDisplayName = (type) => {\n  const hugType = type?.toLowerCase() || 'standard';\n  return HUG_ICONS[hugType]?.name || HUG_ICONS.standard.name;\n};\n\n/**\n * Get description for hug type\n * @param {string} type - Type of hug\n * @returns {string} Description\n */\nexport const getHugTypeDescription = (type) => {\n  const hugType = type?.toLowerCase() || 'standard';\n  return HUG_ICONS[hugType]?.description || HUG_ICONS.standard.description;\n};\n\nexport default {\n  HUG_ICONS,\n  getHugIconByType,\n  getHugTypes,\n  getHugTypeColor,\n  getHugTypeDisplayName,\n  getHugTypeDescription\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { getHugIconByType, getHugTypeColor, getHugTypeDisplayName } from '../../utils/hugIcons';\nimport { getAnimalHugIconByType, getAnimalHugTypeColor, getAnimalHugTypeDisplayName } from '../../utils/animalsHugIcons';\n\n// Import animal hug types directly to avoid circular dependencies\nconst ANIMAL_HUG_TYPES = [\n  'fox', 'bear', 'hedgehog', 'rabbit', 'penguin', 'yinyang',\n  'sloth', 'panda', 'cat', 'unicorn'\n];\n\n/**\n * Styled components for the HugIcon\n */\nconst IconContainer = styled(motion.div)`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: ${props => props.margin || '0'};\n  cursor: ${props => props.onClick ? 'pointer' : 'default'};\n`;\n\nconst IconWrapper = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${props => {\n    switch (props.size) {\n      case 'xs': return '24px';\n      case 'sm': return '32px';\n      case 'md': return '48px';\n      case 'lg': return '64px';\n      case 'xl': return '96px';\n      default: return props.size || '48px';\n    }\n  }};\n  height: ${props => {\n    switch (props.size) {\n      case 'xs': return '24px';\n      case 'sm': return '32px';\n      case 'md': return '48px';\n      case 'lg': return '64px';\n      case 'xl': return '96px';\n      default: return props.size || '48px';\n    }\n  }};\n  background-color: ${props => props.showBackground ? '#ffffff' : 'transparent'};\n  border-radius: 50%;\n  padding: ${props => props.showBackground ? '8px' : '0'};\n  border: ${props => props.isSelected ? `2px solid ${props.color || '#4a90e2'}` : 'none'};\n  box-shadow: ${props => props.isSelected ? '0 0 10px rgba(0,0,0,0.1)' : 'none'};\n`;\n\nconst StyledIcon = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nconst IconLabel = styled.span`\n  margin-top: 8px;\n  font-size: 0.9rem;\n  color: #333;\n  text-align: center;\n`;\n\n/**\n * Animation variants for the HugIcon\n */\nconst iconVariants = {\n  initial: { scale: 1 },\n  hover: { scale: 1.1 },\n  tap: { scale: 0.95 },\n  selected: { \n    scale: 1.05,\n    transition: { \n      type: 'spring',\n      stiffness: 400,\n      damping: 10\n    }\n  }\n};\n\n/**\n * HugIcon Component\n * Displays a hug icon with optional label and animations\n * Supports both standard and animal-themed hug icons\n */\nconst HugIcon = ({\n  /** Type of hug icon to display */\n  type = 'standard',\n  /** Size of the icon */\n  size = 'md',\n  /** Whether to show the label below the icon */\n  showLabel = false,\n  /** Whether to show a background behind the icon */\n  showBackground = false,\n  /** Whether the icon should be highlighted */\n  isSelected = false,\n  /** Whether to apply animations to the icon */\n  animate = true,\n  /** CSS margin value */\n  margin,\n  /** Click handler for the icon */\n  onClick\n}) => {\n  // Check if this is an animal icon type or standard type\n  const isAnimalType = ANIMAL_HUG_TYPES.includes(type);\n  \n  // Get the icon source and color based on the type\n  const iconSrc = isAnimalType \n    ? getAnimalHugIconByType(type) \n    : getHugIconByType(type);\n    \n  const color = isAnimalType \n    ? getAnimalHugTypeColor(type) \n    : getHugTypeColor(type);\n    \n  const name = isAnimalType \n    ? getAnimalHugTypeDisplayName(type) \n    : getHugTypeDisplayName(type);\n\n  return (\n    <IconContainer \n      margin={margin}\n      onClick={onClick}\n      data-testid={`hug-icon-${type}`}\n    >\n      <IconWrapper \n        size={size}\n        showBackground={showBackground}\n        isSelected={isSelected}\n        color={color}\n        initial=\"initial\"\n        whileHover={animate ? \"hover\" : \"\"}\n        whileTap={animate ? \"tap\" : \"\"}\n        animate={isSelected && animate ? \"selected\" : \"initial\"}\n        variants={animate ? iconVariants : {}}\n      >\n        <StyledIcon \n          src={iconSrc} \n          alt={`${name} icon`} \n        />\n      </IconWrapper>\n      \n      {showLabel && (\n        <IconLabel>{name}</IconLabel>\n      )}\n    </IconContainer>\n  );\n};\n\n// Combine standard and animal hug types for PropTypes validation\nconst validHugTypes = [\n  'standard', 'supportive', 'group', 'comforting', 'enthusiastic', 'virtual',\n  ...Object.keys(ANIMAL_HUG_ICONS)\n];\n\nHugIcon.propTypes = {\n  type: PropTypes.oneOf(validHugTypes),\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    PropTypes.string\n  ]),\n  showLabel: PropTypes.bool,\n  showBackground: PropTypes.bool,\n  isSelected: PropTypes.bool,\n  animate: PropTypes.bool,\n  margin: PropTypes.string,\n  onClick: PropTypes.func\n};\n\nexport default HugIcon;"],"names":["HUG_ICONS","StandardHugIcon","SupportiveHugIcon","GroupHugIcon","ComfortingHugIcon","EnthusiasticHugIcon","VirtualHugIcon","getHugIconByType","type","hugType","_a","getHugTypes","getHugTypeColor","getHugTypeDisplayName","getHugTypeDescription","ANIMAL_HUG_TYPES","IconContainer","styled","motion","props","IconWrapper","StyledIcon","IconLabel","iconVariants","HugIcon","size","showLabel","showBackground","isSelected","animate","margin","onClick","isAnimalType","iconSrc","getAnimalHugIconByType","color","getAnimalHugTypeColor","name","getAnimalHugTypeDisplayName","jsxs","jsx","validHugTypes","PropTypes"],"mappings":"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"}