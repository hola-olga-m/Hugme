{"version":3,"file":"HugCenter-776c5a19.js","sources":["../../src/pages/HugCenter.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAuth } from '../context/AuthContext';\nimport LoadingScreen from '../components/common/LoadingScreen';\n\n// Styled components\nconst HugCenterContainer = styled.div`\n  min-height: 100vh;\n  background-color: var(--gray-100);\n`;\n\nconst HugCenterHeader = styled.header`\n  background-color: white;\n  padding: 1rem;\n  box-shadow: var(--shadow-sm);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: var(--primary-color);\n  cursor: pointer;\n`;\n\nconst BackButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--gray-600);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  \n  &:hover {\n    color: var(--primary-color);\n  }\n  \n  &::before {\n    content: '←';\n    margin-right: 0.5rem;\n    font-size: 1.2rem;\n  }\n`;\n\nconst HugCenterContent = styled.main`\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\nconst HugCenterTitle = styled.h1`\n  color: var(--gray-800);\n  margin-bottom: 1.5rem;\n`;\n\nconst HugCenterDescription = styled.p`\n  color: var(--gray-600);\n  margin-bottom: 2rem;\n`;\n\nconst TabContainer = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst TabButtons = styled.div`\n  display: flex;\n  border-bottom: 1px solid var(--gray-300);\n  margin-bottom: 2rem;\n`;\n\nconst TabButton = styled.button`\n  background: none;\n  border: none;\n  padding: 1rem 1.5rem;\n  cursor: pointer;\n  font-weight: ${props => props.active ? '600' : '400'};\n  color: ${props => props.active ? 'var(--primary-color)' : 'var(--gray-600)'};\n  border-bottom: ${props => props.active ? '2px solid var(--primary-color)' : '2px solid transparent'};\n  margin-bottom: -1px;\n  transition: var(--transition-base);\n  \n  &:hover {\n    color: var(--primary-color);\n  }\n`;\n\nconst ActionCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 2rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n`;\n\nconst SectionTitle = styled.h2`\n  color: var(--primary-color);\n  margin-bottom: 1.5rem;\n  font-size: 1.5rem;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: var(--gray-800);\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 1px solid var(--gray-300);\n  border-radius: var(--border-radius-md);\n  transition: var(--transition-base);\n  \n  &:focus {\n    border-color: var(--primary-color);\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 102, 255, 0.25);\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 1px solid var(--gray-300);\n  border-radius: var(--border-radius-md);\n  transition: var(--transition-base);\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-position: right 1rem center;\n  background-size: 1em;\n  \n  &:focus {\n    border-color: var(--primary-color);\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 102, 255, 0.25);\n  }\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 1px solid var(--gray-300);\n  border-radius: var(--border-radius-md);\n  transition: var(--transition-base);\n  min-height: 100px;\n  resize: vertical;\n  \n  &:focus {\n    border-color: var(--primary-color);\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 102, 255, 0.25);\n  }\n`;\n\nconst Checkbox = styled.div`\n  display: flex;\n  align-items: center;\n  \n  input {\n    margin-right: 0.5rem;\n  }\n  \n  label {\n    font-weight: normal;\n  }\n`;\n\nconst SubmitButton = styled.button`\n  background-color: var(--primary-color);\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: var(--border-radius-md);\n  font-weight: 500;\n  cursor: pointer;\n  transition: var(--transition-base);\n  \n  &:hover {\n    background-color: var(--primary-dark);\n  }\n  \n  &:disabled {\n    background-color: var(--gray-400);\n    cursor: not-allowed;\n  }\n`;\n\nconst PlaceholderMessage = styled.div`\n  background-color: var(--gray-200);\n  color: var(--gray-600);\n  padding: 2rem;\n  text-align: center;\n  border-radius: var(--border-radius-md);\n`;\n\nconst HugsList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n`;\n\nconst HugCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-sm);\n  border-left: 4px solid ${props => props.received ? 'var(--secondary-color)' : 'var(--primary-color)'};\n`;\n\nconst HugCardHeader = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\n\nconst HugAvatar = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: ${props => props.received ? 'var(--secondary-light)' : 'var(--primary-light)'};\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 0.75rem;\n`;\n\nconst HugUser = styled.div`\n  flex: 1;\n  \n  .name {\n    font-weight: 500;\n    margin-bottom: 0.25rem;\n  }\n  \n  .date {\n    font-size: 0.8rem;\n    color: var(--gray-600);\n  }\n`;\n\nconst HugType = styled.div`\n  background-color: ${props => props.received ? 'var(--secondary-color)' : 'var(--primary-color)'};\n  color: white;\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n  border-radius: var(--border-radius-sm);\n  margin-left: 0.5rem;\n`;\n\nconst HugMessage = styled.p`\n  color: var(--gray-700);\n  font-size: 0.95rem;\n  margin-bottom: 1rem;\n`;\n\nconst EmptyStateMessage = styled.div`\n  text-align: center;\n  padding: 3rem 1rem;\n  color: var(--gray-600);\n  \n  p {\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst HugCenter = () => {\n  const [activeTab, setActiveTab] = useState('sendHug');\n  const [formData, setFormData] = useState({\n    recipientId: '',\n    hugType: 'SUPPORTIVE',\n    message: '',\n    isCommunity: false,\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  \n  const navigateToDashboard = () => {\n    navigate('/dashboard');\n  };\n  \n  const handleTabChange = (tab) => {\n    setActiveTab(tab);\n  };\n  \n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // In a real app, you would submit this data to your API\n    console.log('Submitting hug:', formData);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setFormData({\n        recipientId: '',\n        hugType: 'SUPPORTIVE',\n        message: '',\n        isCommunity: false,\n      });\n      setIsSubmitting(false);\n      \n      // Display success message or update UI accordingly\n      alert('Hug sent successfully!');\n    }, 1000);\n  };\n  \n  const renderSendHugForm = () => (\n    <ActionCard>\n      <SectionTitle>Send a Virtual Hug</SectionTitle>\n      \n      <form onSubmit={handleSubmit}>\n        <FormGroup>\n          <Label htmlFor=\"recipientId\">Recipient</Label>\n          <Select\n            id=\"recipientId\"\n            name=\"recipientId\"\n            value={formData.recipientId}\n            onChange={handleChange}\n            required\n          >\n            <option value=\"\">Select a recipient</option>\n            <option value=\"user1\">Sarah Johnson</option>\n            <option value=\"user2\">Michael Chen</option>\n            <option value=\"user3\">Aisha Patel</option>\n          </Select>\n        </FormGroup>\n        \n        <FormGroup>\n          <Label htmlFor=\"hugType\">Hug Type</Label>\n          <Select\n            id=\"hugType\"\n            name=\"hugType\"\n            value={formData.hugType}\n            onChange={handleChange}\n            required\n          >\n            <option value=\"QUICK\">Quick Hug</option>\n            <option value=\"WARM\">Warm Hug</option>\n            <option value=\"SUPPORTIVE\">Supportive Hug</option>\n            <option value=\"COMFORTING\">Comforting Hug</option>\n            <option value=\"ENCOURAGING\">Encouraging Hug</option>\n            <option value=\"CELEBRATORY\">Celebratory Hug</option>\n          </Select>\n        </FormGroup>\n        \n        <FormGroup>\n          <Label htmlFor=\"message\">Message (optional)</Label>\n          <Textarea\n            id=\"message\"\n            name=\"message\"\n            value={formData.message}\n            onChange={handleChange}\n            placeholder=\"Add a personal message with your hug...\"\n          />\n        </FormGroup>\n        \n        <SubmitButton type=\"submit\" disabled={isSubmitting}>\n          {isSubmitting ? 'Sending...' : 'Send Hug'}\n        </SubmitButton>\n      </form>\n    </ActionCard>\n  );\n  \n  const renderRequestHugForm = () => (\n    <ActionCard>\n      <SectionTitle>Request a Hug</SectionTitle>\n      \n      <form onSubmit={handleSubmit}>\n        <FormGroup>\n          <Label htmlFor=\"message\">Why do you need a hug?</Label>\n          <Textarea\n            id=\"message\"\n            name=\"message\"\n            value={formData.message}\n            onChange={handleChange}\n            placeholder=\"Share why you could use some support right now...\"\n            required\n          />\n        </FormGroup>\n        \n        <FormGroup>\n          <Checkbox>\n            <input\n              type=\"checkbox\"\n              id=\"isCommunity\"\n              name=\"isCommunity\"\n              checked={formData.isCommunity}\n              onChange={handleChange}\n            />\n            <label htmlFor=\"isCommunity\">Make this a community request (anyone can respond)</label>\n          </Checkbox>\n        </FormGroup>\n        \n        {!formData.isCommunity && (\n          <FormGroup>\n            <Label htmlFor=\"recipientId\">Request from specific person</Label>\n            <Select\n              id=\"recipientId\"\n              name=\"recipientId\"\n              value={formData.recipientId}\n              onChange={handleChange}\n              required={!formData.isCommunity}\n            >\n              <option value=\"\">Select a person</option>\n              <option value=\"user1\">Sarah Johnson</option>\n              <option value=\"user2\">Michael Chen</option>\n              <option value=\"user3\">Aisha Patel</option>\n            </Select>\n          </FormGroup>\n        )}\n        \n        <SubmitButton type=\"submit\" disabled={isSubmitting}>\n          {isSubmitting ? 'Submitting...' : 'Request Hug'}\n        </SubmitButton>\n      </form>\n    </ActionCard>\n  );\n  \n  const renderHugHistory = () => (\n    <>\n      <SectionTitle>Hugs Received</SectionTitle>\n      <HugsList>\n        <HugCard received>\n          <HugCardHeader>\n            <HugAvatar received>MJ</HugAvatar>\n            <HugUser>\n              <div className=\"name\">Michael Johnson</div>\n              <div className=\"date\">March 20, 2025</div>\n            </HugUser>\n            <HugType received>SUPPORTIVE</HugType>\n          </HugCardHeader>\n          <HugMessage>\n            Hang in there! I know you've been going through a tough time lately, but you're stronger than you think. Here's a hug to remind you that you're not alone.\n          </HugMessage>\n        </HugCard>\n        \n        <HugCard received>\n          <HugCardHeader>\n            <HugAvatar received>AP</HugAvatar>\n            <HugUser>\n              <div className=\"name\">Aisha Patel</div>\n              <div className=\"date\">March 15, 2025</div>\n            </HugUser>\n            <HugType received>CELEBRATORY</HugType>\n          </HugCardHeader>\n          <HugMessage>\n            Congratulations on your achievement! So proud of you. Virtual hug sent your way! 🎉\n          </HugMessage>\n        </HugCard>\n      </HugsList>\n      \n      <SectionTitle style={{ marginTop: '2rem' }}>Hugs Sent</SectionTitle>\n      <HugsList>\n        <HugCard>\n          <HugCardHeader>\n            <HugAvatar>SJ</HugAvatar>\n            <HugUser>\n              <div className=\"name\">Sarah Johnson</div>\n              <div className=\"date\">March 22, 2025</div>\n            </HugUser>\n            <HugType>COMFORTING</HugType>\n          </HugCardHeader>\n          <HugMessage>\n            I heard about what happened. I'm here for you, always. This hug comes with my heartfelt support.\n          </HugMessage>\n        </HugCard>\n      </HugsList>\n    </>\n  );\n  \n  const renderPendingRequests = () => (\n    <PlaceholderMessage>\n      <p>There are no pending hug requests at this time.</p>\n      <p>When someone requests a hug from you, it will appear here.</p>\n    </PlaceholderMessage>\n  );\n  \n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'sendHug':\n        return renderSendHugForm();\n      case 'requestHug':\n        return renderRequestHugForm();\n      case 'hugHistory':\n        return renderHugHistory();\n      case 'pendingRequests':\n        return renderPendingRequests();\n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <HugCenterContainer>\n      <HugCenterHeader>\n        <Logo onClick={navigateToDashboard}>HugMeNow</Logo>\n        <BackButton onClick={navigateToDashboard}>Back to Dashboard</BackButton>\n      </HugCenterHeader>\n      \n      <HugCenterContent>\n        <HugCenterTitle>Hug Center</HugCenterTitle>\n        <HugCenterDescription>\n          Send and receive virtual hugs to provide emotional support and connection with others.\n          Sometimes a simple gesture can make all the difference.\n        </HugCenterDescription>\n        \n        <TabContainer>\n          <TabButtons>\n            <TabButton \n              active={activeTab === 'sendHug'} \n              onClick={() => handleTabChange('sendHug')}\n            >\n              Send a Hug\n            </TabButton>\n            <TabButton \n              active={activeTab === 'requestHug'} \n              onClick={() => handleTabChange('requestHug')}\n            >\n              Request a Hug\n            </TabButton>\n            <TabButton \n              active={activeTab === 'hugHistory'} \n              onClick={() => handleTabChange('hugHistory')}\n            >\n              Hug History\n            </TabButton>\n            <TabButton \n              active={activeTab === 'pendingRequests'} \n              onClick={() => handleTabChange('pendingRequests')}\n            >\n              Pending Requests\n            </TabButton>\n          </TabButtons>\n          \n          {renderTabContent()}\n        </TabContainer>\n      </HugCenterContent>\n    </HugCenterContainer>\n  );\n};\n\nexport default HugCenter;"],"names":["HugCenterContainer","styled","HugCenterHeader","Logo","BackButton","HugCenterContent","HugCenterTitle","HugCenterDescription","TabContainer","TabButtons","TabButton","props","ActionCard","SectionTitle","FormGroup","Label","Select","Textarea","Checkbox","SubmitButton","PlaceholderMessage","HugsList","HugCard","HugCardHeader","HugAvatar","HugUser","HugType","HugMessage","HugCenter","activeTab","setActiveTab","useState","formData","setFormData","isSubmitting","setIsSubmitting","useAuth","navigate","useNavigate","navigateToDashboard","handleTabChange","tab","handleChange","e","name","value","type","checked","handleSubmit","renderSendHugForm","jsxs","jsx","renderRequestHugForm","renderHugHistory","Fragment","renderPendingRequests","renderTabContent"],"mappings":"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"}