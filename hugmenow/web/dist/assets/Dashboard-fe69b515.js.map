{"version":3,"file":"Dashboard-fe69b515.js","sources":["../../src/components/common/LoadingSpinner.jsx","../../src/components/PublicMoodList.jsx","../../src/assets/icons/happy-face.svg","../../src/assets/icons/hug-icon.svg","../../src/assets/icons/mood-tracker.svg","../../src/assets/icons/community.svg","../../src/assets/icons/png/ComfortingHug.png","../../src/assets/icons/png/EnthusiasticHug.png","../../src/assets/icons/png/GroupHug.png","../../src/assets/icons/png/StandardHug.png","../../src/assets/icons/png/SupportiveHug.png","../../src/assets/icons/png/VirtualHug.png","../../src/assets/icons/png/RelaxingHug.png","../../src/assets/icons/png/WelcomeHug.png","../../src/assets/icons/png/FriendlyHug.png","../../src/assets/icons/png/GentleHug.png","../../src/assets/icons/png/FamilyHug.png","../../src/assets/icons/png/SmilingHug.png","../../src/components/ui/IconComponent.jsx","../../src/components/dashboard/ReceivedHugsWidget.jsx","../../src/components/dashboard/DashboardStats.jsx","../../src/pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1.5rem;\n`;\n\nconst Spinner = styled.div`\n  width: 40px;\n  height: 40px;\n  border: 4px solid var(--gray-200);\n  border-top: 4px solid var(--primary-color);\n  border-radius: 50%;\n  animation: ${spin} 1s linear infinite;\n`;\n\nconst SpinnerText = styled.div`\n  margin-top: 1rem;\n  color: var(--gray-600);\n  font-size: 0.9rem;\n`;\n\nconst LoadingSpinner = ({ text = 'Loading...' }) => {\n  return (\n    <SpinnerContainer>\n      <Spinner />\n      {text && <SpinnerText>{text}</SpinnerText>}\n    </SpinnerContainer>\n  );\n};\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/client';\nimport { GET_PUBLIC_MOODS } from '../graphql/queries';\nimport LoadingSpinner from './common/LoadingSpinner';\nimport ErrorMessage from './common/ErrorMessage';\n\n// Styled components\nconst PublicMoodsContainer = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n`;\n\nconst MoodsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  \n  h2 {\n    color: var(--gray-800);\n    margin: 0;\n  }\n`;\n\nconst RefreshButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--primary-color);\n  cursor: pointer;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst MoodsList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n  \n  @media (max-width: 640px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst MoodCard = styled.div`\n  border: 1px solid var(--gray-200);\n  border-radius: var(--border-radius);\n  padding: 1rem;\n  transition: var(--transition-base);\n  \n  &:hover {\n    box-shadow: var(--shadow-sm);\n    transform: translateY(-2px);\n  }\n`;\n\nconst MoodHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`;\n\nconst MoodScore = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  \n  .emoji {\n    font-size: 1.5rem;\n  }\n  \n  .label {\n    font-weight: 500;\n    color: var(--gray-800);\n  }\n`;\n\nconst MoodDate = styled.div`\n  font-size: 0.8rem;\n  color: var(--gray-500);\n`;\n\nconst MoodNote = styled.p`\n  color: var(--gray-700);\n  font-size: 0.9rem;\n  margin: 0.5rem 0;\n  line-height: 1.4;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 1rem;\n  font-size: 0.8rem;\n  color: var(--gray-600);\n  \n  .avatar {\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background-color: var(--primary-light);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 0.7rem;\n    margin-right: 0.5rem;\n  }\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: var(--gray-600);\n  \n  p {\n    margin-bottom: 1rem;\n  }\n`;\n\n// Helper functions\nconst getMoodEmoji = (score) => {\n  const emojis = ['😢', '😟', '😐', '🙂', '😄'];\n  return emojis[Math.min(Math.floor(score) - 1, 4)];\n};\n\nconst getMoodLabel = (score) => {\n  const labels = ['Very Sad', 'Sad', 'Neutral', 'Happy', 'Very Happy'];\n  return labels[Math.min(Math.floor(score) - 1, 4)];\n};\n\nconst getFormattedDate = (dateString) => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\nconst getInitials = (name) => {\n  if (!name) return '?';\n  return name\n    .split(' ')\n    .map(part => part[0])\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n};\n\nconst PublicMoodList = () => {\n  const { loading, error, data, refetch } = useQuery(GET_PUBLIC_MOODS);\n  \n  if (loading) return <LoadingSpinner text=\"Loading public moods...\" />;\n  \n  if (error) return <ErrorMessage error={error} />;\n  \n  const publicMoods = data?.publicMoods || [];\n  \n  if (publicMoods.length === 0) {\n    return (\n      <PublicMoodsContainer>\n        <MoodsHeader>\n          <h2>Community Moods</h2>\n          <RefreshButton onClick={() => refetch()}>\n            <span>Refresh</span>\n          </RefreshButton>\n        </MoodsHeader>\n        <EmptyState>\n          <p>No public moods have been shared yet.</p>\n          <p>The community mood board will populate as users share their feelings.</p>\n        </EmptyState>\n      </PublicMoodsContainer>\n    );\n  }\n  \n  return (\n    <PublicMoodsContainer>\n      <MoodsHeader>\n        <h2>Community Moods</h2>\n        <RefreshButton onClick={() => refetch()}>\n          <span>Refresh</span>\n        </RefreshButton>\n      </MoodsHeader>\n      \n      <MoodsList>\n        {publicMoods.map((mood) => (\n          <MoodCard key={mood.id}>\n            <MoodHeader>\n              <MoodScore>\n                <span className=\"emoji\">{getMoodEmoji(mood.score)}</span>\n                <span className=\"label\">{getMoodLabel(mood.score)}</span>\n              </MoodScore>\n              <MoodDate>{getFormattedDate(mood.createdAt)}</MoodDate>\n            </MoodHeader>\n            \n            {mood.note && <MoodNote>{mood.note}</MoodNote>}\n            \n            <UserInfo>\n              <div className=\"avatar\">{getInitials(mood.user?.name)}</div>\n              <span>{mood.user?.name || 'Anonymous User'}</span>\n            </UserInfo>\n          </MoodCard>\n        ))}\n      </MoodsList>\n    </PublicMoodsContainer>\n  );\n};\n\nexport default PublicMoodList;","export default \"__VITE_ASSET__18c0984b__\"","export default \"__VITE_ASSET__a552c3e1__\"","export default \"__VITE_ASSET__458b8591__\"","export default \"__VITE_ASSET__bdb084b4__\"","export default \"__VITE_ASSET__cb47f13d__\"","export default \"__VITE_ASSET__5ce7d239__\"","export default \"__VITE_ASSET__c876e738__\"","export default \"__VITE_ASSET__ff937dab__\"","export default \"__VITE_ASSET__241e2d16__\"","export default \"__VITE_ASSET__835694ca__\"","export default \"__VITE_ASSET__704fac60__\"","export default \"__VITE_ASSET__575d2f69__\"","export default \"__VITE_ASSET__668a36ae__\"","export default \"__VITE_ASSET__642f56d2__\"","export default \"__VITE_ASSET__15f96c17__\"","export default \"__VITE_ASSET__1217a788__\"","import React from 'react';\nimport { motion } from 'framer-motion';\nimport happyFace from '../../assets/icons/happy-face.svg';\nimport hugIcon from '../../assets/icons/hug-icon.svg';\nimport moodTracker from '../../assets/icons/mood-tracker.svg';\nimport community from '../../assets/icons/community.svg';\n\n// Import hug type PNGs\nimport ComfortingHug from '../../assets/icons/png/ComfortingHug.png';\nimport EnthusiasticHug from '../../assets/icons/png/EnthusiasticHug.png';\nimport GroupHug from '../../assets/icons/png/GroupHug.png';\nimport StandardHug from '../../assets/icons/png/StandardHug.png';\nimport SupportiveHug from '../../assets/icons/png/SupportiveHug.png';\nimport VirtualHug from '../../assets/icons/png/VirtualHug.png';\nimport RelaxingHug from '../../assets/icons/png/RelaxingHug.png';\nimport WelcomeHug from '../../assets/icons/png/WelcomeHug.png';\nimport FriendlyHug from '../../assets/icons/png/FriendlyHug.png';\nimport GentleHug from '../../assets/icons/png/GentleHug.png';\nimport FamilyHug from '../../assets/icons/png/FamilyHug.png';\nimport SmilingHug from '../../assets/icons/png/SmilingHug.png';\n\n// SVG data URIs for mood emojis\nconst moodEmojis = {\n  verySad: `data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='60' cy='60' r='50' fill='%23FFCDD2'/%3E%3Cpath d='M40 45C40 45 45 40 50 45' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M70 45C70 45 75 40 80 45' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M40 85C40 85 60 75 80 85' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3C/svg%3E`,\n  \n  sad: `data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='60' cy='60' r='50' fill='%23FFCDD2'/%3E%3Cpath d='M40 50C40 50 45 45 50 50' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M70 50C70 50 75 45 80 50' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M40 80C40 80 60 70 80 80' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3C/svg%3E`,\n  \n  neutral: `data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='60' cy='60' r='50' fill='%23FFCDD2'/%3E%3Cpath d='M40 50C40 50 45 45 50 50' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M70 50C70 50 75 45 80 50' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M40 75C40 75 60 75 80 75' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3C/svg%3E`,\n  \n  happy: `data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='60' cy='60' r='50' fill='%23FFCDD2'/%3E%3Cpath d='M40 50C40 50 45 45 50 50' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M70 50C70 50 75 45 80 50' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M40 70C40 70 60 80 80 70' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3C/svg%3E`,\n  \n  veryHappy: `data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='60' cy='60' r='50' fill='%23FFCDD2'/%3E%3Cpath d='M35 45C35 45 40 40 45 45' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M75 45C75 45 80 40 85 45' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3Cpath d='M35 65C35 65 60 90 85 65' stroke='%23374151' stroke-width='3' stroke-linecap='round'/%3E%3C/svg%3E`,\n};\n\n// Hearts SVG\nconst heart = `data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z' fill='%23EC4899'/%3E%3C/svg%3E`;\n\n// Fire SVG for streak\nconst fire = `data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 2c3 4 5 6 9 7-4 4-7 8-7 13H10c0-5-3-9-7-13 4-1 6-3 9-7z' fill='%23F59E0B'/%3E%3C/svg%3E`;\n\n/**\n * Icon component for mood emojis and other SVG assets\n */\nexport const Icon = ({ type, score, size = 40, animate = true, ...props }) => {\n  // Handle mood type with score\n  if (type === 'mood' && score !== undefined) {\n    let moodType;\n    if (score === null) return <div style={{ width: size, height: size }}></div>;\n    if (score >= 8.5) moodType = 'veryHappy';\n    else if (score >= 7) moodType = 'happy';\n    else if (score >= 5) moodType = 'neutral';\n    else if (score >= 3) moodType = 'sad';\n    else moodType = 'verySad';\n    \n    const src = moodEmojis[moodType];\n    \n    if (animate) {\n      return (\n        <motion.img \n          src={src}\n          alt={`Mood level: ${moodType}`}\n          width={size}\n          height={size}\n          initial={{ scale: 0 }}\n          animate={{ \n            scale: 1,\n            rotate: [0, 10, -10, 0]\n          }}\n          transition={{ \n            type: \"spring\",\n            damping: 10,\n            stiffness: 100,\n            delay: 0.3\n          }}\n          {...props}\n        />\n      );\n    }\n    \n    return <img src={src} alt={`Mood level: ${moodType}`} width={size} height={size} {...props} />;\n  }\n  \n  // Fixed icon types\n  let src;\n  let alt;\n  \n  switch (type) {\n    case 'happyFace':\n      src = happyFace;\n      alt = 'Happy Face';\n      break;\n    case 'hugIcon':\n      src = hugIcon;\n      alt = 'Hug Icon';\n      break;\n    case 'moodTracker':\n      src = moodTracker;\n      alt = 'Mood Tracker';\n      break;\n    case 'community':\n      src = community;\n      alt = 'Community';\n      break;\n    case 'heart':\n      src = heart;\n      alt = 'Heart';\n      break;\n    case 'fire':\n      src = fire;\n      alt = 'Fire';\n      break;\n    // Hug type icons\n    case 'Comforting':\n    case 'ComfortingHug':\n      src = ComfortingHug;\n      alt = 'Comforting Hug';\n      break;\n    case 'Enthusiastic':\n    case 'EnthusiasticHug':\n      src = EnthusiasticHug;\n      alt = 'Enthusiastic Hug';\n      break;\n    case 'Group':\n    case 'GroupHug':\n      src = GroupHug;\n      alt = 'Group Hug';\n      break;\n    case 'Standard':\n    case 'StandardHug':\n      src = StandardHug;\n      alt = 'Standard Hug';\n      break;\n    case 'Supportive':\n    case 'SupportiveHug':\n      src = SupportiveHug;\n      alt = 'Supportive Hug';\n      break;\n    case 'Virtual':\n    case 'VirtualHug':\n      src = VirtualHug;\n      alt = 'Virtual Hug';\n      break;\n    case 'Relaxing':\n    case 'RelaxingHug':\n      src = RelaxingHug;\n      alt = 'Relaxing Hug';\n      break;\n    case 'Welcome':\n    case 'WelcomeHug':\n      src = WelcomeHug;\n      alt = 'Welcome Hug';\n      break;\n    case 'Friendly':\n    case 'FriendlyHug':\n      src = FriendlyHug;\n      alt = 'Friendly Hug';\n      break;\n    case 'Gentle':\n    case 'GentleHug':\n      src = GentleHug;\n      alt = 'Gentle Hug';\n      break;\n    case 'Family':\n    case 'FamilyHug':\n      src = FamilyHug;\n      alt = 'Family Hug';\n      break;\n    case 'Smiling':\n    case 'SmilingHug':\n      src = SmilingHug;\n      alt = 'Smiling Hug';\n      break;\n    default:\n      // For any other hug type, fall back to standard\n      if (type && type.includes('Hug')) {\n        src = StandardHug;\n        alt = type;\n      } else {\n        return null;\n      }\n  }\n  \n  if (animate) {\n    // More elaborate animation for hug icons\n    if (alt && alt.includes('Hug')) {\n      return (\n        <motion.img \n          src={src} \n          alt={alt}\n          width={size}\n          height={size}\n          initial={{ scale: 0, rotate: -5 }}\n          animate={{ \n            scale: 1, \n            rotate: 0,\n            y: [0, -5, 0]\n          }}\n          whileHover={{ \n            scale: 1.1, \n            rotate: [-2, 2, -2, 0],\n            transition: { \n              rotate: { repeat: 0, duration: 0.5 },\n              scale: { duration: 0.2 }\n            }\n          }}\n          transition={{ \n            type: \"spring\",\n            damping: 12,\n            stiffness: 150,\n            delay: 0.2,\n            y: {\n              repeat: Infinity,\n              repeatType: \"reverse\",\n              duration: 1.5,\n              ease: \"easeInOut\"\n            }\n          }}\n          {...props}\n        />\n      );\n    }\n    \n    // Standard animation for other icons\n    return (\n      <motion.img \n        src={src} \n        alt={alt}\n        width={size}\n        height={size}\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ \n          type: \"spring\",\n          damping: 15,\n          stiffness: 200,\n          delay: 0.2\n        }}\n        {...props}\n      />\n    );\n  }\n  \n  return <img src={src} alt={alt} width={size} height={size} {...props} />;\n}\n\n/**\n * Animated avatar component\n */\nexport const UserAvatar = ({ name, size = 40, bgColor = \"#4F46E5\", ...props }) => {\n  const initial = name ? name[0].toUpperCase() : \"?\";\n  \n  return (\n    <motion.div\n      className=\"user-avatar\"\n      style={{\n        width: size,\n        height: size,\n        borderRadius: '50%',\n        background: bgColor,\n        color: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 'bold',\n        fontSize: size / 2,\n        ...props.style\n      }}\n      initial={{ scale: 0, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      transition={{ \n        type: \"spring\",\n        damping: 12,\n        stiffness: 200,\n        delay: 0.1\n      }}\n      {...props}\n    >\n      {initial}\n    </motion.div>\n  );\n};\n\nexport default Icon;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Icon } from '../ui/IconComponent';\n\n// Styled components for the widget\nconst WidgetContainer = styled.div`\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  padding: 24px;\n  margin-bottom: 24px;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst WidgetHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst Title = styled.h3`\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--gray-800);\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst HugCountBadge = styled.span`\n  background-color: var(--primary-color);\n  color: white;\n  border-radius: 20px;\n  padding: 3px 10px;\n  font-size: 0.85rem;\n  font-weight: 600;\n`;\n\nconst HugCardsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  gap: 16px;\n  margin-top: 12px;\n`;\n\nconst EmptyState = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 24px;\n  text-align: center;\n  \n  h4 {\n    margin: 16px 0 8px;\n    color: var(--gray-700);\n  }\n  \n  p {\n    color: var(--gray-500);\n    max-width: 360px;\n    margin: 0 auto;\n  }\n`;\n\n// Animation variants\nconst cardVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: (i) => ({\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.4,\n      ease: [0.2, 0.65, 0.3, 0.9]\n    }\n  })\n};\n\n/**\n * The enhanced ReceivedHugsWidget component for the dashboard\n * Using PNG icons for better visual appeal\n */\nconst ReceivedHugsWidget = ({ hugs = [] }) => {\n  const unreadCount = hugs.filter(hug => !hug.isRead).length;\n  \n  if (hugs.length === 0) {\n    return (\n      <WidgetContainer>\n        <WidgetHeader>\n          <Title>\n            <Icon type=\"hugIcon\" size={24} />\n            Received Hugs\n          </Title>\n        </WidgetHeader>\n        \n        <EmptyState>\n          <Icon type=\"ComfortingHug\" size={80} animate={true} />\n          <h4>No hugs yet</h4>\n          <p>When someone sends you a hug, it will appear here. Why not send a hug to a friend first?</p>\n        </EmptyState>\n      </WidgetContainer>\n    );\n  }\n\n  return (\n    <WidgetContainer>\n      <WidgetHeader>\n        <Title>\n          <Icon type=\"hugIcon\" size={24} />\n          Received Hugs\n          {unreadCount > 0 && <HugCountBadge>{unreadCount} new</HugCountBadge>}\n        </Title>\n      </WidgetHeader>\n      \n      <HugCardsContainer>\n        <AnimatePresence>\n          {hugs.map((hug, index) => (\n            <HugCard \n              key={hug.id} \n              hug={hug} \n              index={index} \n              isNew={!hug.isRead} \n            />\n          ))}\n        </AnimatePresence>\n      </HugCardsContainer>\n    </WidgetContainer>\n  );\n};\n\n// Styled components for the hug card\nconst CardContainer = styled(motion.div)`\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  padding: 16px;\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  border: 1px solid #f0f0f0;\n  \n  &:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\n  }\n  \n  ${props => props.isNew && `\n    border-left: 3px solid var(--primary-color);\n    background-color: var(--primary-lightest);\n  `}\n`;\n\nconst NewLabel = styled.div`\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  background: var(--primary-color);\n  color: white;\n  font-size: 0.7rem;\n  font-weight: 600;\n  padding: 3px 8px;\n  border-radius: 12px;\n  z-index: 2;\n`;\n\nconst CardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n`;\n\nconst HugIconContainer = styled.div`\n  margin-bottom: 12px;\n  position: relative;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 40px;\n    height: 4px;\n    background: ${props => props.color || 'var(--primary-color)'};\n    border-radius: 2px;\n    opacity: 0.5;\n  }\n`;\n\nconst SenderInfo = styled.div`\n  margin-top: 16px;\n  margin-bottom: 8px;\n  font-weight: 500;\n  color: var(--gray-700);\n`;\n\nconst TimestampText = styled.div`\n  font-size: 0.8rem;\n  color: var(--gray-500);\n  margin-bottom: 12px;\n`;\n\nconst MessagePreview = styled.div`\n  background-color: ${props => `${props.color}10` || 'rgba(0,0,0,0.03)'};\n  padding: 10px 12px;\n  border-radius: 8px;\n  font-style: italic;\n  color: var(--gray-600);\n  font-size: 0.9rem;\n  margin-top: 8px;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`;\n\nconst BackgroundDecoration = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  opacity: 0.04;\n  z-index: 0;\n  pointer-events: none;\n  \n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n/**\n * HugCard component - a beautiful card showing a received hug with PNG icon\n */\nconst HugCard = ({ hug, index, isNew }) => {\n  // Map to return specific colors and descriptions based on hug type\n  const getHugColor = (type) => {\n    const colors = {\n      'ComfortingHug': '#9D65C9',\n      'EnthusiasticHug': '#FF7043',\n      'GroupHug': '#4CAF50',\n      'StandardHug': '#FFC107',\n      'SupportiveHug': '#5C6BC0',\n      'VirtualHug': '#7E57C2',\n      'RelaxingHug': '#26A69A',\n      'WelcomeHug': '#42A5F5',\n      'FriendlyHug': '#66BB6A',\n      'GentleHug': '#AB47BC',\n      'FamilyHug': '#EF5350',\n      'SmilingHug': '#FFA726'\n    };\n    return colors[type] || '#4A90E2';\n  };\n  \n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) {\n      // Today - show time\n      return `Today at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return `${diffDays} days ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  const type = hug.type || 'StandardHug';\n  const hugColor = getHugColor(type);\n  const senderName = hug.sender?.name || hug.sender?.username || 'Anonymous';\n  \n  return (\n    <CardContainer \n      variants={cardVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      custom={index}\n      exit=\"hidden\"\n      isNew={isNew}\n    >\n      {isNew && <NewLabel>New</NewLabel>}\n      \n      <BackgroundDecoration>\n        <svg viewBox=\"0 0 200 200\" fill=\"none\">\n          <circle cx=\"180\" cy=\"20\" r=\"60\" fill={hugColor} />\n          <circle cx=\"20\" cy=\"180\" r=\"40\" fill={hugColor} />\n        </svg>\n      </BackgroundDecoration>\n      \n      <CardContent>\n        <HugIconContainer color={hugColor}>\n          <Icon \n            type={type} \n            size={64} \n            animate={true} \n          />\n        </HugIconContainer>\n        \n        <h4 style={{ margin: '12px 0 4px', color: hugColor }}>\n          {type.replace(/([A-Z])/g, ' $1').trim()}\n        </h4>\n        \n        <SenderInfo>From: {senderName}</SenderInfo>\n        <TimestampText>{formatDate(hug.createdAt || new Date())}</TimestampText>\n        \n        {hug.message && (\n          <MessagePreview color={hugColor}>\n            \"{hug.message}\"\n          </MessagePreview>\n        )}\n      </CardContent>\n    </CardContainer>\n  );\n};\n\nexport default ReceivedHugsWidget;","import React from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { useQuery } from '@apollo/client';\nimport { Icon } from '../ui/IconComponent';\nimport ReceivedHugsWidget from './ReceivedHugsWidget';\nimport { GET_USER_STATS, GET_RECEIVED_HUGS } from '../../graphql/queries';\n\n// Styled components\nconst StatsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n`;\n\nconst StatCard = styled(motion.div)`\n  background: white;\n  border-radius: 16px;\n  padding: 24px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst StatValue = styled.div`\n  font-size: 2.8rem;\n  font-weight: 700;\n  margin: 12px 0;\n  color: var(--primary-color);\n  position: relative;\n  z-index: 1;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 1rem;\n  color: var(--gray-600);\n  position: relative;\n  z-index: 1;\n`;\n\nconst IconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  border-radius: 12px;\n  background-color: ${props => props.bgColor || 'var(--primary-lightest)'};\n  color: ${props => props.iconColor || 'var(--primary-color)'};\n  position: relative;\n  z-index: 1;\n`;\n\nconst BackgroundDecoration = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 120px;\n  height: 120px;\n  opacity: 0.04;\n  z-index: 0;\n  \n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Animation variants\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.15\n    }\n  }\n};\n\nconst cardVariants = {\n  hidden: { y: 20, opacity: 0 },\n  visible: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      type: 'spring',\n      damping: 12,\n      stiffness: 200\n    }\n  }\n};\n\n/**\n * Enhanced dashboard statistics component with animated cards\n * using PNG icons for visual appeal\n */\nconst DashboardStats = () => {\n  const { data: statsData, loading: statsLoading } = useQuery(GET_USER_STATS);\n  const { data: hugsData, loading: hugsLoading } = useQuery(GET_RECEIVED_HUGS);\n  \n  const stats = statsData?.userStats || {\n    moodStreak: 0,\n    totalMoodEntries: 0,\n    hugsSent: 0,\n    hugsReceived: 0\n  };\n  \n  const receivedHugs = hugsData?.receivedHugs || [];\n  \n  // Define stats cards data\n  const statsCards = [\n    {\n      label: 'Day Streak',\n      value: stats.moodStreak,\n      icon: 'fire',\n      color: '#FF9800',\n      bgColor: '#FFF3E0',\n      decoration: (\n        <svg viewBox=\"0 0 120 120\" fill=\"none\">\n          <circle cx=\"100\" cy=\"20\" r=\"80\" fill=\"#FF9800\" />\n        </svg>\n      )\n    },\n    {\n      label: 'Moods Tracked',\n      value: stats.totalMoodEntries,\n      icon: 'moodTracker',\n      color: '#4CAF50',\n      bgColor: '#E8F5E9',\n      decoration: (\n        <svg viewBox=\"0 0 120 120\" fill=\"none\">\n          <circle cx=\"100\" cy=\"20\" r=\"80\" fill=\"#4CAF50\" />\n        </svg>\n      )\n    },\n    {\n      label: 'Hugs Sent',\n      value: stats.hugsSent,\n      icon: 'StandardHug',\n      color: '#5C6BC0',\n      bgColor: '#E8EAF6',\n      decoration: (\n        <svg viewBox=\"0 0 120 120\" fill=\"none\">\n          <circle cx=\"100\" cy=\"20\" r=\"80\" fill=\"#5C6BC0\" />\n        </svg>\n      )\n    },\n    {\n      label: 'Hugs Received',\n      value: stats.hugsReceived,\n      icon: 'ComfortingHug',\n      color: '#9D65C9',\n      bgColor: '#F3E5F5',\n      decoration: (\n        <svg viewBox=\"0 0 120 120\" fill=\"none\">\n          <circle cx=\"100\" cy=\"20\" r=\"80\" fill=\"#9D65C9\" />\n        </svg>\n      )\n    }\n  ];\n  \n  if (statsLoading || hugsLoading) {\n    return <div>Loading dashboard stats...</div>;\n  }\n\n  return (\n    <div>\n      <StatsContainer as={motion.div} variants={containerVariants} initial=\"hidden\" animate=\"visible\">\n        {statsCards.map((stat, index) => (\n          <StatCard key={index} variants={cardVariants}>\n            <IconContainer bgColor={stat.bgColor} iconColor={stat.color}>\n              <Icon type={stat.icon} size={28} />\n            </IconContainer>\n            \n            <StatValue style={{ color: stat.color }}>{stat.value}</StatValue>\n            <StatLabel>{stat.label}</StatLabel>\n            \n            <BackgroundDecoration>\n              {stat.decoration}\n            </BackgroundDecoration>\n          </StatCard>\n        ))}\n      </StatsContainer>\n      \n      <ReceivedHugsWidget hugs={receivedHugs} />\n    </div>\n  );\n};\n\nexport default DashboardStats;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '../context/AuthContext';\nimport LoadingScreen from '../components/common/LoadingScreen';\nimport PublicMoodList from '../components/PublicMoodList';\nimport DashboardStats from '../components/dashboard/DashboardStats';\nimport { Icon } from '../components/ui/IconComponent';\n\n// Styled components\nconst DashboardContainer = styled.div`\n  min-height: 100vh;\n  background-color: var(--gray-100);\n`;\n\nconst DashboardHeader = styled.header`\n  background-color: white;\n  padding: 1rem 1.5rem;\n  box-shadow: var(--shadow-sm);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: var(--primary-color);\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Avatar = styled(motion.div)`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 0.5rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n`;\n\nconst Username = styled.span`\n  font-weight: 500;\n  margin-right: 1rem;\n`;\n\nconst LogoutButton = styled(motion.button)`\n  background: none;\n  border: none;\n  color: var(--gray-600);\n  cursor: pointer;\n  padding: 6px 12px;\n  border-radius: 4px;\n  \n  &:hover {\n    color: var(--danger-color);\n    background-color: var(--gray-100);\n  }\n`;\n\nconst DashboardContent = styled.main`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst WelcomeCard = styled(motion.div)`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 2rem;\n  box-shadow: var(--shadow-md);\n  margin-bottom: 2rem;\n  position: relative;\n  overflow: hidden;\n  \n  h1 {\n    margin-bottom: 1rem;\n    color: var(--gray-800);\n    position: relative;\n    z-index: 1;\n  }\n  \n  p {\n    color: var(--gray-600);\n    margin-bottom: 1.5rem;\n    position: relative;\n    z-index: 1;\n    max-width: 700px;\n  }\n`;\n\nconst WelcomeDecoration = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 300px;\n  height: 100%;\n  opacity: 0.05;\n  z-index: 0;\n  pointer-events: none;\n`;\n\nconst FeaturesGrid = styled(motion.div)`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n  margin-top: 2.5rem;\n`;\n\nconst FeatureCard = styled(motion.div)`\n  background-color: white;\n  border-radius: var(--border-radius-lg);\n  padding: 1.5rem;\n  box-shadow: var(--shadow-md);\n  transition: var(--transition-base);\n  cursor: pointer;\n  overflow: hidden;\n  position: relative;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--shadow-lg);\n  }\n  \n  h2 {\n    color: var(--primary-color);\n    margin-bottom: 1rem;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    position: relative;\n    z-index: 1;\n  }\n  \n  p {\n    color: var(--gray-600);\n    position: relative;\n    z-index: 1;\n  }\n`;\n\nconst FeatureDecoration = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.03;\n  z-index: 0;\n  pointer-events: none;\n`;\n\n// Animation variants\nconst fadeInUp = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { duration: 0.5, ease: [0.22, 1, 0.36, 1] }\n  }\n};\n\nconst staggerContainer = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nconst Dashboard = () => {\n  const { currentUser, logout } = useAuth();\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    // Check if we're coming from a login redirect\n    const hasRedirectFlag = localStorage.getItem('redirectToDashboard') === 'true';\n    \n    if (hasRedirectFlag) {\n      console.log('Dashboard detected redirect flag from login');\n      // Clear the flag\n      localStorage.removeItem('redirectToDashboard');\n    }\n    \n    // Simulate loading data\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n      \n      if (hasRedirectFlag) {\n        console.log('Dashboard fully loaded after login redirect');\n      }\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  const handleLogout = async () => {\n    await logout();\n    navigate('/login');\n  };\n  \n  const navigateToFeature = (path) => {\n    navigate(path);\n  };\n  \n  const getInitials = (name) => {\n    if (!name) return '?';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n  \n  if (isLoading) {\n    return <LoadingScreen text=\"Loading dashboard...\" />;\n  }\n  \n  return (\n    <DashboardContainer>\n      <DashboardHeader>\n        <Logo>\n          <Icon type=\"hugIcon\" size={28} />\n          HugMeNow\n        </Logo>\n        <UserInfo>\n          <Avatar \n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ type: 'spring', bounce: 0.5 }}\n            whileHover={{ scale: 1.1 }}\n          >\n            {getInitials(currentUser?.name)}\n          </Avatar>\n          <Username>{currentUser?.name || 'Guest'}</Username>\n          <LogoutButton \n            onClick={handleLogout}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            Logout\n          </LogoutButton>\n        </UserInfo>\n      </DashboardHeader>\n      \n      <DashboardContent>\n        <WelcomeCard\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={fadeInUp}\n        >\n          <WelcomeDecoration>\n            <svg viewBox=\"0 0 300 200\" fill=\"none\">\n              <circle cx=\"250\" cy=\"50\" r=\"200\" fill=\"var(--primary-color)\" />\n              <circle cx=\"50\" cy=\"150\" r=\"100\" fill=\"var(--primary-color)\" />\n            </svg>\n          </WelcomeDecoration>\n          \n          <h1>Welcome, {currentUser?.name || 'Friend'}!</h1>\n          <p>\n            This is your personal dashboard where you can track your mood, \n            send and receive virtual hugs, and connect with others.\n          </p>\n        </WelcomeCard>\n        \n        <DashboardStats />\n        \n        <FeaturesGrid\n          variants={staggerContainer}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          <FeatureCard\n            onClick={() => navigateToFeature('/mood-tracker')}\n            variants={fadeInUp}\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            <FeatureDecoration>\n              <svg viewBox=\"0 0 200 200\" fill=\"none\">\n                <path d=\"M0 0C50 20 100 50 150 100C170 120 190 150 200 200V0H0Z\" fill=\"var(--primary-color)\" />\n              </svg>\n            </FeatureDecoration>\n            \n            <h2>\n              <Icon type=\"moodTracker\" size={24} />\n              Mood Tracker\n            </h2>\n            <p>\n              Track your daily mood and see patterns in your emotional wellbeing over time.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard\n            onClick={() => navigateToFeature('/hug-center')}\n            variants={fadeInUp}\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            <FeatureDecoration>\n              <svg viewBox=\"0 0 200 200\" fill=\"none\">\n                <path d=\"M0 0C50 20 100 50 150 100C170 120 190 150 200 200V0H0Z\" fill=\"#9D65C9\" />\n              </svg>\n            </FeatureDecoration>\n            \n            <h2>\n              <Icon type=\"ComfortingHug\" size={28} />\n              Hug Center\n            </h2>\n            <p>\n              Send virtual hugs to friends or request hugs from the community when you need support.\n            </p>\n          </FeatureCard>\n          \n          <FeatureCard\n            onClick={() => navigateToFeature('/profile')}\n            variants={fadeInUp}\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            <FeatureDecoration>\n              <svg viewBox=\"0 0 200 200\" fill=\"none\">\n                <path d=\"M0 0C50 20 100 50 150 100C170 120 190 150 200 200V0H0Z\" fill=\"#4CAF50\" />\n              </svg>\n            </FeatureDecoration>\n            \n            <h2>\n              <Icon type=\"profile\" size={24} />\n              Profile\n            </h2>\n            <p>\n              Manage your personal information, preferences, and privacy settings.\n            </p>\n          </FeatureCard>\n        </FeaturesGrid>\n        \n        <div style={{ marginTop: '2rem' }}>\n          <PublicMoodList />\n        </div>\n      </DashboardContent>\n    </DashboardContainer>\n  );\n};\n\nexport default Dashboard;"],"names":["spin","keyframes","SpinnerContainer","styled","Spinner","SpinnerText","LoadingSpinner","text","jsx","PublicMoodsContainer","MoodsHeader","RefreshButton","MoodsList","MoodCard","MoodHeader","MoodScore","MoodDate","MoodNote","UserInfo","EmptyState","getMoodEmoji","score","getMoodLabel","getFormattedDate","dateString","getInitials","name","part","PublicMoodList","loading","error","data","refetch","useQuery","GET_PUBLIC_MOODS","ErrorMessage","publicMoods","jsxs","mood","_a","_b","happyFace","hugIcon","moodTracker","community","ComfortingHug","EnthusiasticHug","GroupHug","StandardHug","SupportiveHug","VirtualHug","RelaxingHug","WelcomeHug","FriendlyHug","GentleHug","FamilyHug","SmilingHug","moodEmojis","heart","fire","Icon","type","size","animate","props","moodType","src","motion","alt","WidgetContainer","WidgetHeader","Title","HugCountBadge","HugCardsContainer","cardVariants","i","ReceivedHugsWidget","hugs","unreadCount","hug","AnimatePresence","index","HugCard","CardContainer","NewLabel","CardContent","HugIconContainer","SenderInfo","TimestampText","MessagePreview","BackgroundDecoration","isNew","getHugColor","formatDate","date","diffMs","diffDays","hugColor","senderName","StatsContainer","StatCard","StatValue","StatLabel","IconContainer","containerVariants","DashboardStats","statsData","statsLoading","GET_USER_STATS","hugsData","hugsLoading","GET_RECEIVED_HUGS","stats","receivedHugs","statsCards","stat","DashboardContainer","DashboardHeader","Logo","Avatar","Username","LogoutButton","DashboardContent","WelcomeCard","WelcomeDecoration","FeaturesGrid","FeatureCard","FeatureDecoration","fadeInUp","staggerContainer","Dashboard","currentUser","logout","useAuth","isLoading","setIsLoading","useState","navigate","useNavigate","useEffect","hasRedirectFlag","timer","handleLogout","navigateToFeature","path","LoadingScreen"],"mappings":"6OAGA,MAAMA,EAAOC;AAAAA;AAAAA;AAAAA,EAKPC,EAAmBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1BC,EAAUD,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMRH,CAAI;AAAA,EAGbK,EAAcF,EAAO;AAAA;AAAA;AAAA;AAAA,EAMrBG,EAAiB,CAAC,CAAE,KAAAC,EAAO,uBAE5BL,EACC,CAAA,SAAA,CAAAM,EAAA,IAACJ,EAAQ,EAAA,EACRG,GAASC,EAAAA,IAAAH,EAAA,CAAa,SAAKE,CAAA,CAAA,CAC9B,CAAA,CAAA,EC5BEE,EAAuBN,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ9BO,EAAcP,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYrBQ,EAAgBR,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAevBS,EAAYT,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUnBU,EAAWV,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYlBW,EAAaX,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpBY,EAAYZ,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAenBa,EAAWb,EAAO;AAAA;AAAA;AAAA,EAKlBc,EAAWd,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOlBe,EAAWf,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBlBgB,EAAahB,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWpBiB,EAAgBC,GACL,CAAC,KAAM,KAAM,KAAM,KAAM,IAAI,EAC9B,KAAK,IAAI,KAAK,MAAMA,CAAK,EAAI,EAAG,CAAC,CAAC,EAG5CC,EAAgBD,GACL,CAAC,WAAY,MAAO,UAAW,QAAS,YAAY,EACrD,KAAK,IAAI,KAAK,MAAMA,CAAK,EAAI,EAAG,CAAC,CAAC,EAG5CE,GAAoBC,GACX,IAAI,KAAKA,CAAU,EACpB,mBAAmB,QAAS,CACtC,KAAM,UACN,MAAO,QACP,IAAK,SAAA,CACN,EAGGC,GAAeC,GACdA,EACEA,EACJ,MAAM,GAAG,EACT,OAAYC,EAAK,CAAC,CAAC,EACnB,KAAK,EAAE,EACP,YACA,EAAA,UAAU,EAAG,CAAC,EANC,IASdC,GAAiB,IAAM,CAC3B,KAAM,CAAE,QAAAC,EAAS,MAAAC,EAAO,KAAAC,EAAM,QAAAC,GAAYC,EAASC,CAAgB,EAE/D,GAAAL,EAAgB,OAAArB,EAAA,IAACF,EAAe,CAAA,KAAK,yBAA0B,CAAA,EAE/D,GAAAwB,EAAc,OAAAtB,MAAC2B,GAAa,MAAAL,CAAc,CAAA,EAExC,MAAAM,GAAcL,GAAA,YAAAA,EAAM,cAAe,GAErC,OAAAK,EAAY,SAAW,SAEtB3B,EACC,CAAA,SAAA,CAAA4B,OAAC3B,EACC,CAAA,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAe,iBAAA,CAAA,EACnBA,EAAAA,IAACG,GAAc,QAAS,IAAMqB,IAC5B,SAAAxB,EAAA,IAAC,OAAK,CAAA,SAAA,SAAA,CAAO,CACf,CAAA,CAAA,EACF,SACCW,EACC,CAAA,SAAA,CAAAX,EAAAA,IAAC,KAAE,SAAqC,uCAAA,CAAA,EACxCA,EAAAA,IAAC,KAAE,SAAqE,uEAAA,CAAA,CAAA,EAC1E,CACF,CAAA,CAAA,SAKDC,EACC,CAAA,SAAA,CAAA4B,OAAC3B,EACC,CAAA,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAe,iBAAA,CAAA,EACnBA,EAAAA,IAACG,GAAc,QAAS,IAAMqB,IAC5B,SAAAxB,EAAA,IAAC,OAAK,CAAA,SAAA,SAAA,CAAO,CACf,CAAA,CAAA,EACF,QAECI,EACE,CAAA,SAAAwB,EAAY,IAAKE,0BACfzB,EACC,CAAA,SAAA,CAAAwB,OAACvB,EACC,CAAA,SAAA,CAAAuB,OAACtB,EACC,CAAA,SAAA,CAAAP,MAAC,QAAK,UAAU,QAAS,SAAaY,EAAAkB,EAAK,KAAK,EAAE,QACjD,OAAK,CAAA,UAAU,QAAS,SAAahB,EAAAgB,EAAK,KAAK,EAAE,CAAA,EACpD,EACC9B,EAAA,IAAAQ,EAAA,CAAU,SAAiBO,GAAAe,EAAK,SAAS,EAAE,CAAA,EAC9C,EAECA,EAAK,MAAS9B,MAAAS,EAAA,CAAU,WAAK,KAAK,SAElCC,EACC,CAAA,SAAA,CAAAV,EAAAA,IAAC,OAAI,UAAU,SAAU,aAAY+B,EAAAD,EAAK,OAAL,YAAAC,EAAW,IAAI,EAAE,EACrD/B,EAAA,IAAA,OAAA,CAAM,WAAKgC,EAAAF,EAAA,OAAA,YAAAE,EAAM,OAAQ,iBAAiB,CAAA,EAC7C,CAda,CAAA,EAAAF,EAAK,EAepB,EACD,EACH,CACF,CAAA,CAAA,CAEJ,EC1NeG,GAAA,kCCAAC,GAAA,gCCAAC,GAAA,oCCAAC,GAAA,iCCAAC,GAAA,qCCAAC,GAAA,uCCAAC,GAAA,gCCAAC,EAAA,mCCAAC,GAAA,qCCAAC,GAAA,kCCAAC,GAAA,mCCAAC,GAAA,kCCAAC,GAAA,mCCAAC,GAAA,iCCAAC,GAAA,iCCAAC,GAAA,kCCsBTC,GAAa,CACjB,QAAS,udAET,IAAK,udAEL,QAAS,udAET,MAAO,udAEP,UAAW,sdACb,EAGMC,GAAQ,sUAGRC,GAAO,mNAKAC,EAAO,CAAC,CAAE,KAAAC,EAAM,MAAAxC,EAAO,KAAAyC,EAAO,GAAI,QAAAC,EAAU,GAAM,GAAGC,KAAY,CAExE,GAAAH,IAAS,QAAUxC,IAAU,OAAW,CACtC,IAAA4C,EACJ,GAAI5C,IAAU,KAAa,OAAAb,EAAA,IAAC,OAAI,MAAO,CAAE,MAAOsD,EAAM,OAAQA,CAAQ,CAAA,CAAA,EAClEzC,GAAS,IAAgB4C,EAAA,YACpB5C,GAAS,EAAc4C,EAAA,QACvB5C,GAAS,EAAc4C,EAAA,UACvB5C,GAAS,EAAc4C,EAAA,MAChBA,EAAA,UAEVC,MAAAA,EAAMT,GAAWQ,CAAQ,EAE/B,OAAIF,EAEAvD,EAAA,IAAC2D,EAAO,IAAP,CACC,IAAKD,EACL,IAAK,eAAeD,CAAQ,GAC5B,MAAOH,EACP,OAAQA,EACR,QAAS,CAAE,MAAO,CAAE,EACpB,QAAS,CACP,MAAO,EACP,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,CACxB,EACA,WAAY,CACV,KAAM,SACN,QAAS,GACT,UAAW,IACX,MAAO,EACT,EACC,GAAGE,CAAA,CAAA,EAKFxD,EAAAA,IAAA,MAAA,CAAI,IAAK0D,EAAK,IAAK,eAAeD,CAAQ,GAAI,MAAOH,EAAM,OAAQA,EAAO,GAAGE,CAAO,CAAA,CAC9F,CAGI,IAAAE,EACAE,EAEJ,OAAQP,EAAM,CACZ,IAAK,YACGK,EAAAzB,GACA2B,EAAA,aACN,MACF,IAAK,UACGF,EAAAxB,GACA0B,EAAA,WACN,MACF,IAAK,cACGF,EAAAvB,GACAyB,EAAA,eACN,MACF,IAAK,YACGF,EAAAtB,GACAwB,EAAA,YACN,MACF,IAAK,QACGF,EAAAR,GACAU,EAAA,QACN,MACF,IAAK,OACGF,EAAAP,GACAS,EAAA,OACN,MAEF,IAAK,aACL,IAAK,gBACGF,EAAArB,GACAuB,EAAA,iBACN,MACF,IAAK,eACL,IAAK,kBACGF,EAAApB,GACAsB,EAAA,mBACN,MACF,IAAK,QACL,IAAK,WACGF,EAAAnB,GACAqB,EAAA,YACN,MACF,IAAK,WACL,IAAK,cACGF,EAAAlB,EACAoB,EAAA,eACN,MACF,IAAK,aACL,IAAK,gBACGF,EAAAjB,GACAmB,EAAA,iBACN,MACF,IAAK,UACL,IAAK,aACGF,EAAAhB,GACAkB,EAAA,cACN,MACF,IAAK,WACL,IAAK,cACGF,EAAAf,GACAiB,EAAA,eACN,MACF,IAAK,UACL,IAAK,aACGF,EAAAd,GACAgB,EAAA,cACN,MACF,IAAK,WACL,IAAK,cACGF,EAAAb,GACAe,EAAA,eACN,MACF,IAAK,SACL,IAAK,YACGF,EAAAZ,GACAc,EAAA,aACN,MACF,IAAK,SACL,IAAK,YACGF,EAAAX,GACAa,EAAA,aACN,MACF,IAAK,UACL,IAAK,aACGF,EAAAV,GACAY,EAAA,cACN,MACF,QAEE,GAAIP,GAAQA,EAAK,SAAS,KAAK,EACvBK,EAAAlB,EACAoB,EAAAP,MAEC,QAAA,IAEb,CAEA,OAAIE,EAEEK,GAAOA,EAAI,SAAS,KAAK,EAEzB5D,EAAA,IAAC2D,EAAO,IAAP,CACC,IAAAD,EACA,IAAAE,EACA,MAAON,EACP,OAAQA,EACR,QAAS,CAAE,MAAO,EAAG,OAAQ,EAAG,EAChC,QAAS,CACP,MAAO,EACP,OAAQ,EACR,EAAG,CAAC,EAAG,GAAI,CAAC,CACd,EACA,WAAY,CACV,MAAO,IACP,OAAQ,CAAC,GAAI,EAAG,GAAI,CAAC,EACrB,WAAY,CACV,OAAQ,CAAE,OAAQ,EAAG,SAAU,EAAI,EACnC,MAAO,CAAE,SAAU,EAAI,CACzB,CACF,EACA,WAAY,CACV,KAAM,SACN,QAAS,GACT,UAAW,IACX,MAAO,GACP,EAAG,CACD,OAAQ,IACR,WAAY,UACZ,SAAU,IACV,KAAM,WACR,CACF,EACC,GAAGE,CAAA,CAAA,EAORxD,EAAA,IAAC2D,EAAO,IAAP,CACC,IAAAD,EACA,IAAAE,EACA,MAAON,EACP,OAAQA,EACR,QAAS,CAAE,MAAO,CAAE,EACpB,QAAS,CAAE,MAAO,CAAE,EACpB,WAAY,CACV,KAAM,SACN,QAAS,GACT,UAAW,IACX,MAAO,EACT,EACC,GAAGE,CAAA,CAAA,EAKHxD,MAAC,OAAI,IAAA0D,EAAU,IAAAE,EAAU,MAAON,EAAM,OAAQA,EAAO,GAAGE,CAAO,CAAA,CACxE,EC7OMK,EAAkBlE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUzBmE,EAAenE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOtBoE,EAAQpE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUfqE,GAAgBrE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvBsE,GAAoBtE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3BgB,GAAahB,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBpBuE,GAAe,CACnB,OAAQ,CAAE,QAAS,EAAG,EAAG,EAAG,EAC5B,QAAUC,IAAO,CACf,QAAS,EACT,EAAG,EACH,WAAY,CACV,MAAOA,EAAI,GACX,SAAU,GACV,KAAM,CAAC,GAAK,IAAM,GAAK,EAAG,CAC5B,CAAA,EAEJ,EAMMC,GAAqB,CAAC,CAAE,KAAAC,EAAO,CAAA,KAAS,CAC5C,MAAMC,EAAcD,EAAK,UAAc,CAACE,EAAI,MAAM,EAAE,OAEhD,OAAAF,EAAK,SAAW,SAEfR,EACC,CAAA,SAAA,CAAC7D,EAAA,IAAA8D,EAAA,CACC,gBAACC,EACC,CAAA,SAAA,CAAA/D,EAAA,IAACoD,EAAK,CAAA,KAAK,UAAU,KAAM,GAAI,EAAE,eAAA,CAAA,CAEnC,CACF,CAAA,SAECzC,GACC,CAAA,SAAA,CAAAX,MAACoD,GAAK,KAAK,gBAAgB,KAAM,GAAI,QAAS,GAAM,EACpDpD,EAAAA,IAAC,MAAG,SAAW,aAAA,CAAA,EACfA,EAAAA,IAAC,KAAE,SAAwF,0FAAA,CAAA,CAAA,EAC7F,CACF,CAAA,CAAA,SAKD6D,EACC,CAAA,SAAA,CAAC7D,EAAA,IAAA8D,EAAA,CACC,gBAACC,EACC,CAAA,SAAA,CAAA/D,EAAA,IAACoD,EAAK,CAAA,KAAK,UAAU,KAAM,GAAI,EAAE,gBAEhCkB,EAAc,GAAKzC,EAAAA,KAACmC,GAAe,CAAA,SAAA,CAAAM,EAAY,MAAA,EAAI,CAAA,CAAA,CACtD,CACF,CAAA,EAEAtE,EAAAA,IAACiE,IACC,SAACjE,EAAA,IAAAwE,EAAA,CACE,WAAK,IAAI,CAACD,EAAKE,IACdzE,EAAA,IAAC0E,GAAA,CAEC,IAAAH,EACA,MAAAE,EACA,MAAO,CAACF,EAAI,MAAA,EAHPA,EAAI,EAAA,CAKZ,EACH,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,EAGMI,GAAgBhF,EAAOgE,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBnCH,GAASA,EAAM,OAAS;AAAA;AAAA;AAAA,GAGzB;AAAA,EAGGoB,GAAWjF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAalBkF,GAAclF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrBmF,GAAmBnF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAYd6D,GAASA,EAAM,OAAS,sBAAsB;AAAA;AAAA;AAAA;AAAA,EAM1DuB,GAAapF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpBqF,GAAgBrF,EAAO;AAAA;AAAA;AAAA;AAAA,EAMvBsF,GAAiBtF,EAAO;AAAA,sBACC6D,GAAA,GAAGA,EAAM,KAAK,MAAQ,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAejE0B,GAAuBvF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmB9B+E,GAAU,CAAC,CAAE,IAAAH,EAAK,MAAAE,EAAO,MAAAU,KAAY,SAEnC,MAAAC,EAAe/B,IACJ,CACb,cAAiB,UACjB,gBAAmB,UACnB,SAAY,UACZ,YAAe,UACf,cAAiB,UACjB,WAAc,UACd,YAAe,UACf,WAAc,UACd,YAAe,UACf,UAAa,UACb,UAAa,UACb,WAAc,SAAA,GAEFA,CAAI,GAAK,UAGnBgC,EAAcrE,GAAe,CAC3B,MAAAsE,EAAO,IAAI,KAAKtE,CAAU,EAE1BuE,MADU,KACKD,EACfE,EAAW,KAAK,MAAMD,GAAU,IAAO,GAAK,GAAK,GAAG,EAE1D,OAAIC,IAAa,EAER,YAAYF,EAAK,mBAAmB,CAAA,EAAI,CAAE,KAAM,UAAW,OAAQ,SAAW,CAAA,CAAC,GAC7EE,IAAa,EACf,YACEA,EAAW,EACb,GAAGA,CAAQ,YAEXF,EAAK,oBACd,EAGIjC,EAAOkB,EAAI,MAAQ,cACnBkB,EAAWL,EAAY/B,CAAI,EAC3BqC,IAAa3D,EAAAwC,EAAI,SAAJ,YAAAxC,EAAY,SAAQC,EAAAuC,EAAI,SAAJ,YAAAvC,EAAY,WAAY,YAG7D,OAAAH,EAAA,KAAC8C,GAAA,CACC,SAAUT,GACV,QAAQ,SACR,QAAQ,UACR,OAAQO,EACR,KAAK,SACL,MAAAU,EAEC,SAAA,CAASA,GAAAnF,EAAAA,IAAC4E,IAAS,SAAG,KAAA,CAAA,QAEtBM,GACC,CAAA,SAAArD,OAAC,OAAI,QAAQ,cAAc,KAAK,OAC9B,SAAA,CAAC7B,EAAAA,IAAA,SAAA,CAAO,GAAG,MAAM,GAAG,KAAK,EAAE,KAAK,KAAMyF,CAAU,CAAA,EAChDzF,EAAAA,IAAC,UAAO,GAAG,KAAK,GAAG,MAAM,EAAE,KAAK,KAAMyF,CAAU,CAAA,CAAA,CAAA,CAClD,CACF,CAAA,SAECZ,GACC,CAAA,SAAA,CAAC7E,EAAAA,IAAA8E,GAAA,CAAiB,MAAOW,EACvB,SAAAzF,EAAA,IAACoD,EAAA,CACC,KAAAC,EACA,KAAM,GACN,QAAS,EAAA,CAAA,EAEb,EAECrD,EAAA,IAAA,KAAA,CAAG,MAAO,CAAE,OAAQ,aAAc,MAAOyF,CAAS,EAChD,WAAK,QAAQ,WAAY,KAAK,EAAE,OACnC,SAECV,GAAW,CAAA,SAAA,CAAA,SAAOW,CAAA,EAAW,EAC9B1F,MAACgF,IAAe,SAAWK,EAAAd,EAAI,WAAiB,IAAA,IAAM,EAAE,EAEvDA,EAAI,SACF1C,OAAAoD,GAAA,CAAe,MAAOQ,EAAU,SAAA,CAAA,IAC7BlB,EAAI,QAAQ,GAAA,EAChB,CAAA,EAEJ,CAAA,CAAA,CAAA,CAGN,ECjUMoB,GAAiBhG,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxBiG,GAAWjG,EAAOgE,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY5BkC,GAAYlG,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASnBmG,GAAYnG,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnBoG,GAAgBpG,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOP6D,GAASA,EAAM,SAAW,yBAAyB;AAAA,WAC9DA,GAASA,EAAM,WAAa,sBAAsB;AAAA;AAAA;AAAA,EAKvD0B,GAAuBvF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB9BqG,GAAoB,CACxB,OAAQ,CAAE,QAAS,CAAE,EACrB,QAAS,CACP,QAAS,EACT,WAAY,CACV,gBAAiB,GACnB,CACF,CACF,EAEM9B,GAAe,CACnB,OAAQ,CAAE,EAAG,GAAI,QAAS,CAAE,EAC5B,QAAS,CACP,EAAG,EACH,QAAS,EACT,WAAY,CACV,KAAM,SACN,QAAS,GACT,UAAW,GACb,CACF,CACF,EAMM+B,GAAiB,IAAM,CAC3B,KAAM,CAAE,KAAMC,EAAW,QAASC,GAAiB1E,EAAS2E,CAAc,EACpE,CAAE,KAAMC,EAAU,QAASC,GAAgB7E,EAAS8E,CAAiB,EAErEC,GAAQN,GAAA,YAAAA,EAAW,YAAa,CACpC,WAAY,EACZ,iBAAkB,EAClB,SAAU,EACV,aAAc,CAAA,EAGVO,GAAeJ,GAAA,YAAAA,EAAU,eAAgB,GAGzCK,EAAa,CACjB,CACE,MAAO,aACP,MAAOF,EAAM,WACb,KAAM,OACN,MAAO,UACP,QAAS,UACT,WACGxG,EAAAA,IAAA,MAAA,CAAI,QAAQ,cAAc,KAAK,OAC9B,SAAAA,MAAC,SAAO,CAAA,GAAG,MAAM,GAAG,KAAK,EAAE,KAAK,KAAK,SAAU,CAAA,EACjD,CAEJ,EACA,CACE,MAAO,gBACP,MAAOwG,EAAM,iBACb,KAAM,cACN,MAAO,UACP,QAAS,UACT,WACGxG,EAAAA,IAAA,MAAA,CAAI,QAAQ,cAAc,KAAK,OAC9B,SAAAA,MAAC,SAAO,CAAA,GAAG,MAAM,GAAG,KAAK,EAAE,KAAK,KAAK,SAAU,CAAA,EACjD,CAEJ,EACA,CACE,MAAO,YACP,MAAOwG,EAAM,SACb,KAAM,cACN,MAAO,UACP,QAAS,UACT,WACGxG,EAAAA,IAAA,MAAA,CAAI,QAAQ,cAAc,KAAK,OAC9B,SAAAA,MAAC,SAAO,CAAA,GAAG,MAAM,GAAG,KAAK,EAAE,KAAK,KAAK,SAAU,CAAA,EACjD,CAEJ,EACA,CACE,MAAO,gBACP,MAAOwG,EAAM,aACb,KAAM,gBACN,MAAO,UACP,QAAS,UACT,WACGxG,EAAAA,IAAA,MAAA,CAAI,QAAQ,cAAc,KAAK,OAC9B,SAAAA,MAAC,SAAO,CAAA,GAAG,MAAM,GAAG,KAAK,EAAE,KAAK,KAAK,SAAU,CAAA,EACjD,CAEJ,CAAA,EAGF,OAAImG,GAAgBG,EACXtG,EAAA,IAAC,OAAI,SAA0B,4BAAA,CAAA,SAIrC,MACC,CAAA,SAAA,CAAAA,EAAAA,IAAC2F,IAAe,GAAIhC,EAAO,IAAK,SAAUqC,GAAmB,QAAQ,SAAS,QAAQ,UACnF,SAAAU,EAAW,IAAI,CAACC,EAAMlC,IACpB5C,OAAA+D,GAAA,CAAqB,SAAU1B,GAC9B,SAAA,CAAAlE,MAAC+F,GAAc,CAAA,QAASY,EAAK,QAAS,UAAWA,EAAK,MACpD,SAAC3G,EAAAA,IAAAoD,EAAA,CAAK,KAAMuD,EAAK,KAAM,KAAM,EAAI,CAAA,EACnC,EAEA3G,EAAAA,IAAC6F,IAAU,MAAO,CAAE,MAAOc,EAAK,OAAU,SAAAA,EAAK,KAAM,CAAA,EACrD3G,EAAAA,IAAC8F,GAAW,CAAA,SAAAa,EAAK,KAAM,CAAA,EAEvB3G,EAAAA,IAACkF,GACE,CAAA,SAAAyB,EAAK,UACR,CAAA,CAAA,GAValC,CAWf,CACD,EACH,EAEAzE,EAAAA,IAACoE,GAAmB,CAAA,KAAMqC,CAAc,CAAA,CAC1C,CAAA,CAAA,CAEJ,ECpLMG,GAAqBjH,EAAO;AAAA;AAAA;AAAA,EAK5BkH,GAAkBlH,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASzBmH,GAAOnH,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASde,GAAWf,EAAO;AAAA;AAAA;AAAA,EAKlBoH,GAASpH,EAAOgE,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc1BqD,GAAWrH,EAAO;AAAA;AAAA;AAAA,EAKlBsH,GAAetH,EAAOgE,EAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcnCuD,GAAmBvH,EAAO;AAAA;AAAA;AAAA;AAAA,EAM1BwH,GAAcxH,EAAOgE,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyB/ByD,GAAoBzH,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW3B0H,GAAe1H,EAAOgE,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhC2D,EAAc3H,EAAOgE,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgC/B4D,EAAoB5H,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY3B6H,EAAW,CACf,OAAQ,CAAE,QAAS,EAAG,EAAG,EAAG,EAC5B,QAAS,CACP,QAAS,EACT,EAAG,EACH,WAAY,CAAE,SAAU,GAAK,KAAM,CAAC,IAAM,EAAG,IAAM,CAAC,CAAE,CACxD,CACF,EAEMC,GAAmB,CACvB,OAAQ,CAAE,QAAS,CAAE,EACrB,QAAS,CACP,QAAS,EACT,WAAY,CACV,gBAAiB,EACnB,CACF,CACF,EAEMC,GAAY,IAAM,CACtB,KAAM,CAAE,YAAAC,EAAa,OAAAC,CAAO,EAAIC,EAAQ,EAClC,CAACC,EAAWC,CAAY,EAAIC,WAAS,EAAI,EACzCC,EAAWC,IAEjBC,EAAAA,UAAU,IAAM,CAEd,MAAMC,EAAkB,aAAa,QAAQ,qBAAqB,IAAM,OAEpEA,IACF,QAAQ,IAAI,6CAA6C,EAEzD,aAAa,WAAW,qBAAqB,GAIzC,MAAAC,EAAQ,WAAW,IAAM,CAC7BN,EAAa,EAAK,EAEdK,GACF,QAAQ,IAAI,6CAA6C,GAE1D,GAAI,EAEA,MAAA,IAAM,aAAaC,CAAK,CACjC,EAAG,CAAE,CAAA,EAEL,MAAMC,EAAe,SAAY,CAC/B,MAAMV,EAAO,EACbK,EAAS,QAAQ,CAAA,EAGbM,EAAqBC,GAAS,CAClCP,EAASO,CAAI,CAAA,EAGTvH,EAAeC,GACdA,EACEA,EACJ,MAAM,GAAG,EACT,OAAYC,EAAK,CAAC,CAAC,EACnB,KAAK,EAAE,EACP,YACA,EAAA,UAAU,EAAG,CAAC,EANC,IASpB,OAAI2G,EACK9H,EAAA,IAACyI,EAAc,CAAA,KAAK,sBAAuB,CAAA,SAIjD7B,GACC,CAAA,SAAA,CAAA/E,OAACgF,GACC,CAAA,SAAA,CAAAhF,OAACiF,GACC,CAAA,SAAA,CAAA9G,EAAA,IAACoD,EAAK,CAAA,KAAK,UAAU,KAAM,GAAI,EAAE,UAAA,EAEnC,SACC1C,GACC,CAAA,SAAA,CAAAV,EAAA,IAAC+G,GAAA,CACC,QAAS,CAAE,MAAO,CAAE,EACpB,QAAS,CAAE,MAAO,CAAE,EACpB,WAAY,CAAE,KAAM,SAAU,OAAQ,EAAI,EAC1C,WAAY,CAAE,MAAO,GAAI,EAExB,SAAA9F,EAAY0G,GAAA,YAAAA,EAAa,IAAI,CAAA,CAChC,EACC3H,EAAA,IAAAgH,GAAA,CAAU,UAAaW,GAAA,YAAAA,EAAA,OAAQ,QAAQ,EACxC3H,EAAA,IAACiH,GAAA,CACC,QAASqB,EACT,WAAY,CAAE,MAAO,IAAK,EAC1B,SAAU,CAAE,MAAO,GAAK,EACzB,SAAA,QAAA,CAED,CAAA,EACF,CAAA,EACF,SAECpB,GACC,CAAA,SAAA,CAAArF,EAAA,KAACsF,GAAA,CACC,QAAQ,SACR,QAAQ,UACR,SAAUK,EAEV,SAAA,CAAAxH,EAAAA,IAACoH,IACC,SAACvF,OAAA,MAAA,CAAI,QAAQ,cAAc,KAAK,OAC9B,SAAA,CAAC7B,EAAAA,IAAA,SAAA,CAAO,GAAG,MAAM,GAAG,KAAK,EAAE,MAAM,KAAK,sBAAuB,CAAA,EAC7DA,EAAAA,IAAC,UAAO,GAAG,KAAK,GAAG,MAAM,EAAE,MAAM,KAAK,sBAAuB,CAAA,CAAA,CAAA,CAC/D,CACF,CAAA,SAEC,KAAG,CAAA,SAAA,CAAA,aAAU2H,GAAA,YAAAA,EAAa,OAAQ,SAAS,GAAA,EAAC,EAC7C3H,EAAAA,IAAC,KAAE,SAGH,wHAAA,CAAA,CAAA,CAAA,CACF,QAECiG,GAAe,EAAA,EAEhBpE,EAAA,KAACwF,GAAA,CACC,SAAUI,GACV,QAAQ,SACR,QAAQ,UAER,SAAA,CAAA5F,EAAA,KAACyF,EAAA,CACC,QAAS,IAAMiB,EAAkB,eAAe,EAChD,SAAUf,EACV,WAAY,CAAE,MAAO,IAAK,EAC1B,SAAU,CAAE,MAAO,GAAK,EAExB,SAAA,CAAAxH,MAACuH,EACC,CAAA,SAAAvH,EAAAA,IAAC,MAAI,CAAA,QAAQ,cAAc,KAAK,OAC9B,SAACA,EAAA,IAAA,OAAA,CAAK,EAAE,yDAAyD,KAAK,sBAAA,CAAuB,CAC/F,CAAA,EACF,SAEC,KACC,CAAA,SAAA,CAAAA,EAAA,IAACoD,EAAK,CAAA,KAAK,cAAc,KAAM,GAAI,EAAE,cAAA,EAEvC,EACApD,EAAAA,IAAC,KAAE,SAEH,+EAAA,CAAA,CAAA,CAAA,CACF,EAEA6B,EAAA,KAACyF,EAAA,CACC,QAAS,IAAMiB,EAAkB,aAAa,EAC9C,SAAUf,EACV,WAAY,CAAE,MAAO,IAAK,EAC1B,SAAU,CAAE,MAAO,GAAK,EAExB,SAAA,CAAAxH,MAACuH,EACC,CAAA,SAAAvH,EAAAA,IAAC,MAAI,CAAA,QAAQ,cAAc,KAAK,OAC9B,SAACA,EAAA,IAAA,OAAA,CAAK,EAAE,yDAAyD,KAAK,SAAA,CAAU,CAClF,CAAA,EACF,SAEC,KACC,CAAA,SAAA,CAAAA,EAAA,IAACoD,EAAK,CAAA,KAAK,gBAAgB,KAAM,GAAI,EAAE,YAAA,EAEzC,EACApD,EAAAA,IAAC,KAAE,SAEH,wFAAA,CAAA,CAAA,CAAA,CACF,EAEA6B,EAAA,KAACyF,EAAA,CACC,QAAS,IAAMiB,EAAkB,UAAU,EAC3C,SAAUf,EACV,WAAY,CAAE,MAAO,IAAK,EAC1B,SAAU,CAAE,MAAO,GAAK,EAExB,SAAA,CAAAxH,MAACuH,EACC,CAAA,SAAAvH,EAAAA,IAAC,MAAI,CAAA,QAAQ,cAAc,KAAK,OAC9B,SAACA,EAAA,IAAA,OAAA,CAAK,EAAE,yDAAyD,KAAK,SAAA,CAAU,CAClF,CAAA,EACF,SAEC,KACC,CAAA,SAAA,CAAAA,EAAA,IAACoD,EAAK,CAAA,KAAK,UAAU,KAAM,GAAI,EAAE,SAAA,EAEnC,EACApD,EAAAA,IAAC,KAAE,SAEH,sEAAA,CAAA,CAAA,CAAA,CACF,CAAA,CAAA,CACF,EAEAA,EAAAA,IAAC,OAAI,MAAO,CAAE,UAAW,QACvB,SAACA,EAAA,IAAAoB,GAAA,CAAA,CAAe,CAClB,CAAA,CAAA,EACF,CACF,CAAA,CAAA,CAEJ"}