import express from 'express';
import { createProxyMiddleware } from 'http-proxy-middleware';
import history from 'connect-history-api-fallback';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

// Get the directory name using ES module approach
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Create a comprehensive fallback HTML content with navigation and styling
const fallbackHtml = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HugMeNow - Emotional Wellness Platform</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    /* Base styles */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: 'Poppins', sans-serif; 
      line-height: 1.6; 
      min-height: 100vh; 
      background-color: #f8f9fa;
      color: #333;
    }
    
    /* Layout */
    .container { 
      max-width: 1200px; 
      margin: 0 auto; 
      padding: 1rem 2rem; 
    }
    
    /* Header and navigation */
    .header {
      background-color: white;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      padding: 1rem 0;
      position: sticky;
      top: 0;
      z-index: 100;
    }
    .nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .nav-logo {
      font-size: 1.5rem;
      font-weight: 700;
      color: #4a90e2;
    }
    .nav-menu {
      list-style: none;
      display: flex;
      gap: 1.5rem;
    }
    .nav-item { display: inline-block; }
    .nav-link {
      text-decoration: none;
      color: #555;
      font-weight: 500;
      transition: color 0.3s;
    }
    .nav-link:hover { color: #4a90e2; }
    
    /* Main content */
    main { padding: 2rem 0; }
    .card {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      padding: 2rem;
      margin-bottom: 2rem;
    }
    h1 { 
      color: #4a90e2; 
      margin-bottom: 1rem; 
      font-size: 2rem;
    }
    h2 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
      color: #333;
    }
    
    /* Auth forms */
    .auth-container {
      max-width: 500px;
      margin: 2rem auto;
      padding: 2rem;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .auth-title {
      text-align: center;
      margin-bottom: 1.5rem;
    }
    .form-group {
      margin-bottom: 1.5rem;
    }
    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    .form-input {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-family: inherit;
      font-size: 1rem;
    }
    .auth-footer {
      text-align: center;
      margin-top: 1rem;
    }
    
    /* Spinner */
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top: 4px solid #4a90e2;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 1rem auto;
    }
    @keyframes spin { 
      0% { transform: rotate(0deg); } 
      100% { transform: rotate(360deg); } 
    }
    
    /* Buttons */
    .btn {
      display: inline-block;
      background-color: #4a90e2;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-family: inherit;
      font-size: 1rem;
      font-weight: 500;
      text-decoration: none;
      transition: background-color 0.3s;
    }
    .btn:hover {
      background-color: #3a80d2;
    }
    
    /* Footer */
    footer {
      text-align: center;
      padding: 1rem 0;
      border-top: 1px solid #eee;
      margin-top: 2rem;
      color: #666;
    }
    
    /* Dashboard cards */
    .dashboard-cards {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }
    .dashboard-card {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      padding: 1.5rem;
      text-align: center;
    }
    .dashboard-card-title {
      font-size: 1.1rem;
      margin-bottom: 1rem;
      color: #555;
    }
    .stats-number {
      font-size: 2.5rem;
      font-weight: 700;
      color: #4a90e2;
      margin-bottom: 0.5rem;
    }
  </style>
</head>
<body>
  <div id="root">
    <header class="header">
      <div class="container">
        <nav class="nav">
          <div class="nav-logo">HugMeNow</div>
          <ul class="nav-menu">
            <li class="nav-item"><a href="/" class="nav-link">Home</a></li>
            <li class="nav-item"><a href="/dashboard" class="nav-link">Dashboard</a></li>
            <li class="nav-item"><a href="/mood-tracker" class="nav-link">Mood Tracker</a></li>
            <li class="nav-item"><a href="/hug-center" class="nav-link">Hug Center</a></li>
            <li class="nav-item"><a href="/profile" class="nav-link">Profile</a></li>
            <li class="nav-item"><a href="/about" class="nav-link">About</a></li>
            <li class="nav-item"><a href="/login" class="nav-link">Login</a></li>
          </ul>
        </nav>
      </div>
    </header>
    
    <main>
      <div class="container">
        <div class="card">
          <h1>Welcome to HugMeNow</h1>
          <p>Your emotional wellness platform</p>
          <div class="spinner"></div>
          <p>Loading application...</p>
          <p style="margin-top: 1rem;">If this screen persists, please refresh the page.</p>
        </div>
      </div>
    </main>
    
    <footer>
      <div class="container">
        <p>&copy; ${new Date().getFullYear()} HugMeNow. All rights reserved.</p>
      </div>
    </footer>
  </div>
  
  <script>
    // Simple client-side routing for the static fallback page
    document.addEventListener('DOMContentLoaded', function() {
      const links = document.querySelectorAll('a.nav-link');
      const mainContent = document.querySelector('main .container');
      
      // Handle link clicks
      links.forEach(link => {
        link.addEventListener('click', function(e) {
          // Only handle links to our own pages
          if (link.getAttribute('href').startsWith('/')) {
            e.preventDefault();
            const path = link.getAttribute('href');
            
            // Update URL without page reload
            window.history.pushState({}, '', path);
            
            // Update content based on path
            updateContent(path);
          }
        });
      });
      
      // Handle back/forward browser buttons
      window.addEventListener('popstate', function() {
        updateContent(window.location.pathname);
      });
      
      // Initialize content based on current path
      updateContent(window.location.pathname);
      
      // Function to update content based on current path
      function updateContent(path) {
        let content = '';
        
        // Simple routing mechanism
        switch(path) {
          case '/login':
            content = \`
              <div class="auth-container">
                <h1 class="auth-title">Login</h1>
                <div class="form-group">
                  <label class="form-label">Email</label>
                  <input type="email" class="form-input" placeholder="Enter your email">
                </div>
                <div class="form-group">
                  <label class="form-label">Password</label>
                  <input type="password" class="form-input" placeholder="Enter your password">
                </div>
                <button class="btn" style="width: 100%; margin-bottom: 1rem;">Login</button>
                <div class="auth-footer">
                  <p>Don't have an account? <a href="/register">Register</a></p>
                </div>
              </div>
            \`;
            break;
          case '/register':
            content = \`
              <div class="auth-container">
                <h1 class="auth-title">Register</h1>
                <div class="form-group">
                  <label class="form-label">Name</label>
                  <input type="text" class="form-input" placeholder="Enter your name">
                </div>
                <div class="form-group">
                  <label class="form-label">Email</label>
                  <input type="email" class="form-input" placeholder="Enter your email">
                </div>
                <div class="form-group">
                  <label class="form-label">Password</label>
                  <input type="password" class="form-input" placeholder="Create a password">
                </div>
                <button class="btn" style="width: 100%; margin-bottom: 1rem;">Register</button>
                <div class="auth-footer">
                  <p>Already have an account? <a href="/login">Login</a></p>
                </div>
              </div>
            \`;
            break;
          case '/dashboard':
            content = \`
              <h1>Dashboard</h1>
              <div class="dashboard-cards">
                <div class="dashboard-card">
                  <h3 class="dashboard-card-title">Mood Streak</h3>
                  <div class="stats-number">7</div>
                  <p>days in a row</p>
                </div>
                <div class="dashboard-card">
                  <h3 class="dashboard-card-title">Hugs Received</h3>
                  <div class="stats-number">12</div>
                  <p>this week</p>
                </div>
                <div class="dashboard-card">
                  <h3 class="dashboard-card-title">Hugs Sent</h3>
                  <div class="stats-number">8</div>
                  <p>this week</p>
                </div>
              </div>
            \`;
            break;
          case '/mood-tracker':
            content = \`
              <h1>Mood Tracker</h1>
              <div class="card">
                <h2>How are you feeling today?</h2>
                <div style="display: flex; justify-content: space-between; margin: 2rem 0">
                  <button class="btn" style="flex: 1; margin: 0 0.5rem">1</button>
                  <button class="btn" style="flex: 1; margin: 0 0.5rem">2</button>
                  <button class="btn" style="flex: 1; margin: 0 0.5rem">3</button>
                  <button class="btn" style="flex: 1; margin: 0 0.5rem">4</button>
                  <button class="btn" style="flex: 1; margin: 0 0.5rem">5</button>
                </div>
                <div class="form-group">
                  <label class="form-label">Add a note (optional)</label>
                  <textarea class="form-input" rows="3" placeholder="What made you feel this way?"></textarea>
                </div>
                <button class="btn">Save Mood</button>
              </div>
            \`;
            break;
          case '/hug-center':
            content = \`
              <h1>Hug Center</h1>
              <div class="card">
                <h2>Send a Virtual Hug</h2>
                <div class="form-group">
                  <label class="form-label">Recipient</label>
                  <select class="form-input">
                    <option value="">Select a friend</option>
                    <option value="1">Friend 1</option>
                    <option value="2">Friend 2</option>
                  </select>
                </div>
                <div class="form-group">
                  <label class="form-label">Hug Type</label>
                  <select class="form-input">
                    <option value="QUICK">Quick Hug</option>
                    <option value="WARM">Warm Hug</option>
                    <option value="SUPPORTIVE">Supportive Hug</option>
                    <option value="COMFORTING">Comforting Hug</option>
                  </select>
                </div>
                <div class="form-group">
                  <label class="form-label">Message (optional)</label>
                  <textarea class="form-input" rows="3" placeholder="Add a personal message"></textarea>
                </div>
                <button class="btn">Send Hug</button>
              </div>
            \`;
            break;
          case '/profile':
            content = \`
              <div class="profile-header" style="display: flex; align-items: center; margin-bottom: 2rem;">
                <div style="width: 100px; height: 100px; border-radius: 50%; background-color: #e0e0e0; margin-right: 1.5rem; display: flex; justify-content: center; align-items: center;">
                  <span style="font-size: 3rem; color: #aaa;">?</span>
                </div>
                <div>
                  <h1 style="margin-bottom: 0.5rem;">User Name</h1>
                  <p style="color: #666;">@username</p>
                </div>
              </div>
              <div class="card">
                <h2>Profile Settings</h2>
                <div class="form-group">
                  <label class="form-label">Name</label>
                  <input type="text" class="form-input" value="User Name">
                </div>
                <div class="form-group">
                  <label class="form-label">Email</label>
                  <input type="email" class="form-input" value="user@example.com">
                </div>
                <div class="form-group">
                  <label class="form-label">Avatar URL</label>
                  <input type="text" class="form-input">
                </div>
                <button class="btn">Save Changes</button>
              </div>
            \`;
            break;
          case '/about':
            content = \`
              <h1>About HugMeNow</h1>
              <p>A mobile-first emotional wellness platform that provides intuitive mental health tracking.</p>
              <div class="card">
                <h2>Features</h2>
                <ul style="margin-left: 1.5rem; margin-bottom: 1.5rem;">
                  <li>Mood tracking</li>
                  <li>Virtual hugs</li>
                  <li>Community support</li>
                  <li>Personal wellness journal</li>
                </ul>
                <a href="/" class="btn">Back to Home</a>
              </div>
            \`;
            break;
          default:
            content = \`
              <h1>HugMeNow</h1>
              <p>Welcome to the HugMeNow emotional wellness platform</p>
              <div class="card">
                <h2>Getting Started</h2>
                <p>This is a simplified version of the application to verify the build process.</p>
                <div style="margin-top: 20px">
                  <a href="/about" class="btn">Learn More</a>
                </div>
              </div>
            \`;
        }
        
        mainContent.innerHTML = content;
        
        // Re-attach event listeners to any new links
        mainContent.querySelectorAll('a').forEach(link => {
          if (link.getAttribute('href') && link.getAttribute('href').startsWith('/')) {
            link.addEventListener('click', function(e) {
              e.preventDefault();
              const path = link.getAttribute('href');
              window.history.pushState({}, '', path);
              updateContent(path);
            });
          }
        });
      }
    });
  </script>
</body>
</html>`;

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 5000;
const API_HOST = process.env.API_HOST || 'http://localhost:3000';

// Detect if running in Replit environment
const isReplitEnv = !!process.env.REPL_ID || !!process.env.REPLIT_SLUG;

// Add a simple health check route (before any middleware) to make port detection easier
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    port: PORT,
    time: new Date().toISOString()
  });
});

// Add another health check endpoint with a different name for compatibility
app.get('/health-check', (req, res) => {
  res.status(200).send('OK');
});

// Add logging middleware with CORS headers for Replit environment
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  
  // Set CORS headers for all requests to enable Replit access
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  // Handle OPTIONS requests for CORS preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
});

// Configure API and GraphQL proxies
const createProxy = (target, pathRewrite = {}) => ({
  target,
  changeOrigin: true,
  pathRewrite,
  logLevel: 'error',
  onError: (err, req, res) => {
    console.error(`Proxy Error (${req.url}):`, err.message);
    res.writeHead(500, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Backend server unavailable', error: err.message }));
  }
});

// Apply proxies before history middleware
app.use('/api', createProxyMiddleware(createProxy(API_HOST, { '^/api': '' })));
app.use('/graphql', createProxyMiddleware(createProxy(API_HOST)));
app.use('/info', createProxyMiddleware(createProxy(API_HOST)));

// Add a URL info route that won't be rewritten
app.get('/url-info', (req, res) => {
  res.status(200).json({ 
    url: req.url,
    headers: req.headers,
    protocol: req.protocol,
    host: req.get('host'),
    originalUrl: req.originalUrl
  });
});

// Apply history API fallback middleware for SPA routing
app.use(history({
  verbose: true,
  disableDotRule: true,
  rewrites: [
    // Don't rewrite API requests or health checks
    { from: /^\/(api|graphql|info|assets|health|health-check|server-status|url-info)\/.*$/, to: context => context.parsedUrl.pathname },
    // Special handling for direct routes in the SPA
    { from: /^\/(login|register|dashboard|mood-tracker|hug-center|profile|about)$/, to: '/index.html' },
    // For all other paths, rewrite to index.html for client-side routing
    { from: /^\/.*/, to: '/index.html' }
  ],
  // This helps with Replit URLs
  htmlAcceptHeaders: ['text/html', 'application/xhtml+xml', '*/*']
}));

// Paths to serve static content from
const distPath = join(__dirname, 'dist');
const publicPath = join(__dirname, 'public');
const projectRoot = __dirname;

// Function to ensure the dist directory exists
const ensureDistDirectory = () => {
  // Create dist directory if it doesn't exist
  if (!fs.existsSync(distPath)) {
    try {
      fs.mkdirSync(distPath, { recursive: true });
      console.log(`Created missing dist directory at: ${distPath}`);
      
      // Create a minimal index.html in the dist directory
      fs.writeFileSync(join(distPath, 'index.html'), fallbackHtml);
      console.log('Created fallback index.html in dist directory');
      
      // Create a _redirects file for SPA routing
      fs.writeFileSync(join(distPath, '_redirects'), '/* /index.html 200');
      console.log('Created _redirects in dist directory');
      
      return true;
    } catch (err) {
      console.error('Error creating dist directory:', err);
      return false;
    }
  }
  return true;
};

// Ensure the dist directory exists before proceeding
const distExists = ensureDistDirectory();

// Serve static files with appropriate caching headers
const serveStaticWithCaching = (path, cacheOptions = {}) => {
  return express.static(path, {
    etag: true,
    lastModified: true,
    setHeaders: (res, filePath) => {
      if (filePath.endsWith('.html')) {
        // No caching for HTML files
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      } else if (filePath.match(/\.(js|css)$/)) {
        // Medium caching for JS and CSS (10 minutes)
        res.setHeader('Cache-Control', 'public, max-age=600');
      } else if (filePath.match(/\.(jpg|jpeg|png|gif|ico|svg|webp)$/)) {
        // Longer caching for images (1 day)
        res.setHeader('Cache-Control', 'public, max-age=86400');
      }
      
      // Apply any custom headers from options
      if (cacheOptions.headers) {
        Object.entries(cacheOptions.headers).forEach(([key, value]) => {
          res.setHeader(key, value);
        });
      }
    }
  });
};

// Serve static files from dist directory
if (distExists && fs.existsSync(distPath)) {
  app.use(serveStaticWithCaching(distPath));
  console.log(`Serving static files from ${distPath}`);
  
  // If there's a public directory, serve those too
  if (fs.existsSync(publicPath)) {
    app.use(serveStaticWithCaching(publicPath));
    console.log(`Serving static files from ${publicPath}`);
  }
} else {
  console.warn('Warning: Problem with dist directory. Serving only index.html fallback.');
}

// Check if the request is for a static asset
const isAssetRequest = (url) => {
  return url.startsWith('/assets/') || 
         url.includes('.js') || 
         url.includes('.css') || 
         url.includes('.png') || 
         url.includes('.jpg') || 
         url.includes('.svg') || 
         url.includes('.ico');
};

// Fallback route handler for the SPA
app.get('*', (req, res) => {
  const indexHtmlPath = join(distPath, 'index.html');
  const rootIndexHtmlPath = join(projectRoot, 'index.html');
  
  console.log(`Fallback handler for: ${req.url}`);
  
  // For asset requests, we shouldn't serve the index.html
  // This was causing the main issue - asset requests were getting HTML responses
  if (isAssetRequest(req.url)) {
    console.log(`Asset request detected: ${req.url}. Not serving index.html`);
    // Check if the asset exists as a static file
    const assetPath = join(distPath, req.url);
    if (fs.existsSync(assetPath)) {
      return res.sendFile(assetPath);
    }
    return res.status(404).send('Asset not found');
  }
  
  console.log(`User Agent: ${req.headers['user-agent']}`);
  console.log(`Checking for: ${indexHtmlPath} (exists: ${fs.existsSync(indexHtmlPath)})`);
  console.log(`Checking for: ${rootIndexHtmlPath} (exists: ${fs.existsSync(rootIndexHtmlPath)})`);
  
  // Add debug info for CORS (helpful for Replit)
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  
  if (fs.existsSync(indexHtmlPath)) {
    console.log(`Serving from dist/index.html`);
    res.sendFile(indexHtmlPath);
  } else if (fs.existsSync(rootIndexHtmlPath)) {
    console.log(`Serving from root index.html`);
    res.sendFile(rootIndexHtmlPath);
  } else {
    // If no index.html files are found, send the fallback HTML
    console.log(`No index.html found, using fallback HTML`);
    res.send(fallbackHtml);
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).send('Something broke on the server!');
});

// Explicitly print a message that will help workflow detection
console.log(`Starting server on port ${PORT}...`);

// Start the server with a connection test to the backend
const server = app.listen(PORT, '0.0.0.0', () => {
  // Explicitly log port information for workflow detection
  console.log(`### SERVER LISTENING ON PORT ${PORT} ###`);
  console.log(`Server running on http://0.0.0.0:${PORT}`);
  console.log(`API proxy configured to: ${API_HOST}`);
  
  // Log the app structure
  console.log('Available routes:');
  console.log('- / (SPA frontend)');
  console.log('- /api/* (API proxy)');
  console.log('- /graphql (GraphQL proxy)');
  console.log('- /info (App info proxy)');
  
  // Notify that the server is ready
  console.log('Server is ready to accept connections!');
  
  // Additional check to ensure the server is actually listening
  if (server.listening) {
    console.log(`Server confirmed to be listening on port ${PORT}`);
    
    // Create a simple route to confirm server is working
    app.get('/server-status', (req, res) => {
      res.json({ status: 'ok', port: PORT });
    });
  } else {
    console.error(`WARNING: Server reports it is NOT listening on port ${PORT}!`);
  }
});

// Handle server errors
server.on('error', (error) => {
  console.error('Server error:', error);
  
  // If the port is already in use, try a different port
  if (error.code === 'EADDRINUSE') {
    console.log(`Port ${PORT} is already in use. Please use a different port.`);
    process.exit(1);
  }
});

// Handle graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});