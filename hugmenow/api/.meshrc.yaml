sources:
  - name: PostgreSQL
    handler:
      postgraphile:
        connectionString: ${process.env.DATABASE_URL}
        schemaName: 'public'
        pgSettings:
          role: 'postgres'
        enableCors: true
        dynamicJson: true
        setofFunctionsContainNulls: false
        ignoreRBAC: false
        ignoreIndexes: true
        includeExtensionResources: false
        watch: false
        exportGqlSchemaPath: './generated-schema.graphql'
        appendPlugins:
          - 'postgraphile-plugin-connection-filter'

transforms:
  - namingConvention:
      typeNames: pascalCase
      enumValues: upperCase
      fieldNames: camelCase
  # Add additional transforms for enhanced Schema capabilities
  - filterSchema:
      mode: wrap
      filters:
        - true

plugins:
  # Authentication plugin
  - ./src/graphql-mesh/plugins/auth.plugin.js:
      jwtSecret: ${process.env.JWT_SECRET}
  
  # Caching plugin for performance optimization
  - ./src/graphql-mesh/plugins/cache.plugin.js:
      ttl: 300 # 5 minutes cache
  
  # Logging plugin for better debugging
  - ./src/graphql-mesh/plugins/logger.plugin.js
  
  # Validation plugin for request validation
  - ./src/graphql-mesh/plugins/validation.plugin.js:
      maxDepth: 10
      maxAliases: 15
      disableIntrospection: false

# Generation of the SDK
documents:
  - graphql/**/*.graphql

# Output generation for TypeScript SDK
generate:
  - './src/generated/sdk.ts':
      plugins:
        - typescript
        - typescript-operations
        - typescript-resolvers
        - typescript-document-nodes
        - typed-document-node

# Configuration for code generation
additionalResolvers:
  - './src/resolvers/**/*.ts'
  - './src/graphql-mesh/resolvers/**/*.ts'

# Serving configuration
serve:
  playground: true
  endpoint: '/graphql'
  cors: true
  introspection: true
  # Add Envelop configuration
  envelop:
    plugins:
      - useTiming
      - useDepthLimit
      - useParserCache
      - useValidationCache
      - useResponseCache