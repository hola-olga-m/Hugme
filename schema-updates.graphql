# Schema extensions to fix the GraphQL errors

type Query {
  # Add pagination to publicMoods query
  publicMoods(limit: Int, offset: Int): [Mood!]!

  # Add pagination to receivedHugs query
  receivedHugs(limit: Int, offset: Int): [Hug!]!

  # Add search and pagination to users query
  users(search: String, limit: Int, offset: Int): [User!]!

  # Add pagination to friendsMoods query
  friendsMoods(limit: Int, offset: Int): [Mood!]!

  # Add friendship check
  checkFriendship(userId: ID!): Boolean!

  # Add community hug requests
  communityHugRequests: [HugRequest!]!

  # Add single hug query
  hug(id: ID!): Hug!

  # Add hug request query
  hugRequest(id: ID!): HugRequest!

  # Add user profile query
  me: User!

  # Add single mood query
  mood(id: ID!): Mood!

  # Add mood following query
  moodFollowing: [Friendship!]!

  # Add mood streak query
  moodStreak: Int!

  # Add friends list query
  myFriends: [Friendship!]!

  # Add personal hug requests query
  myHugRequests: [HugRequest!]!

  # Add pending friend requests query
  pendingFriendRequests: [Friendship!]!

  # Add pending hug requests query
  pendingHugRequests: [HugRequest!]!

  # Add sent friend requests query
  sentFriendRequests: [Friendship!]!

  # Add sent hugs query with pagination
  sentHugs(limit: Int, offset: Int): [Hug!]!

  # Add user query by ID
  user(id: ID!): User!

  # Add user moods query
  userMoods: [Mood!]!
}

# Fix type mismatch for limit parameter
input MoodsPaginationInput {
  limit: Int
  offset: Int
}

input UsersPaginationInput {
  limit: Int
  offset: Int
}

input HugsPaginationInput {
  limit: Int
  offset: Int
}

# Add Friendship type if missing
type Friendship {
  id: ID!
  status: String!
  requesterId: ID!
  requester: User
  addresseeId: ID!
  addressee: User
  createdAt: DateTime
  updatedAt: DateTime
}

# Add HugRequest type if missing
type HugRequest {
  id: ID!
  senderId: ID!
  sender: User
  message: String
  status: String!
  isPublic: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

# Define DateTime scalar if missing
scalar DateTime
